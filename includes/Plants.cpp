#include "SceneClass.h"
#include "RenderOptions.h"
#include "Plants.h"
#include "Util.h"
#include "MapNode.h"
#include "ModelClass.h"
#include "AdaptOptions.h"
#include "FileUtil.h"
#include "GLSLMgr.h"
#include "Effects.h"
#include "TerrainClass.h"


#define COLOR_TEST
//#define DENSITY_TEST

#define SHOW_STATS
#define SHOW_BRANCH_STATS
//#define DEBUG_SLOPE_BIAS

#define SRAND 	(rands[PERM((randval++))])
#define URAND 	(rands[PERM((randval++))]+0.5)

#define FIRST_FORK  1
#define FIRST_EMIT  2
#define LAST_EMIT   4
#define LAST_FORK   8
#define BASE_FORK   16

#define LINE_MODE   0
#define RECT_MODE   1
#define LEAF_MODE   2
#define SPLINE_MODE 3
#define THREED_MODE 4

#define TEST
// Basic algorithm
// 1) TNplant class implemented similar to sprites, craters etc (i.e placements)
//    Primary task is to generate a set of surface positions to spawn plant instances
// 2) TNbranch class creates a branching pattern for each plant placement
//    - Branches are implemented as 3d points which are projected into eye space then screen space
//    - successive branch levels are generated by calling "emit" recursively 
//      (or fork on first call if multiple branch types exist)
// 3) in screen space either a line (with width) or a polygon is drawn between connecting branch points
// 4) if a polygon is used base and tip parameter points are calculated based on the angle of the branch
//    - distance between tip points is less than that between base points to simulate branch taper
// 5) lighting (branch curvature) is emulated by changing normal from left to right along branch
//   - in the center normal faces directly out to eye
// TODO: 
// 1) Better branching model (DONE)
//  Currently all branches spawn from the same point in screen space
//  Improve this by trying the following:
//  a) allow branches to spawn at random locations along parent stem vector (DONE)
//    - set 'start' position somewhere between top and base using random variable
//  b) place new branches at random offsets from center of parent branches (DONE)
//  c) don't require branch starting width to be the same as parents width (DONE)
//    - scale next segment width based on size of child branch
//  c) In multi-branch cases have a minimum level to start producing new branches and max level to stop (DONE)
//    - min level prevents branches from forming lower in parent trunk
//    - child branches should form only towards the tip of parent branches
// 2) implement geometry shader to improve performance (DONE)
//    - pass in vectors in screen space (bot, top) of line
//    - calculate screen space rectangle (or line)
//    - produce vertex's to draw rectangle (or line)
// 3) add support for textures (DONE)
// 4) add support for bump shading for textures (DONE)
// 5) implement TNLeaf class (DONE)
//    - only generate leaves at end of "terminal" branches
// 6) use a spline function when connecting levels on same branch (WIP)
//   - generate additional line segments between segment end points (no need for branching)
//   - usinq quadratic interpolation from last 3 points to smooth transition
// 7) add curvature to branches by implementing a spline function (DONE)
//   - for efficiency probably best done in a geometry shader (DONE)
// 8) try point-sprite model for leaves (see below)
// 9) use lists to increase render speed
// 10) generate wxWidgets classes for plants
//    - optional support preview window with option to save generated imaged as sprites
	
// BUGS/problems
// 1) don't get enough plants generated - not all color spots produce a new plant
//     o improvement: added extra argument in TNplant to increase size of "dot" (threshold test)
//     o improvement: moving visits++ before threshold test in set_terrain
// 2) far away plants (e.g. trees) look "denuded" (i.e. lack foliage) because smaller branches arn't drawn
//    - may be fixed later by implementing leaf class and rendering leafs at all terminal nodes ?
// 3) multiple plants don't stack if "+" used to connect
//    - Preceding plant loses last branch
//    - works OK without "+" connection
// 4) TNLeaf issues
//   - fake width doesn't seem to be consistent with branch length 
//     o need arbitrary multiplier (~10) otherwise leaves are too narrow
//     o need to base width of leaf on leaf length parameter vs branch width
//   - depth ordering of leafs by distance doesn't always work (transparency wrong for some leafs)
//   - found problem that rectangles were not being created correctly (slanted edges)
//     o fixed by creating projected vector in eye space vs. model space
//     o also fixes width/length problem (narrow leaves)
//     o but lines projected to or away from eye are smaller than those tangent to eye (at same depth)
//       so leaves are drawn with different sizes depending on orientation
//     o overall effect is ok, models young and older leaves on same branch but would be better to be
//       able to control this
//     o one idea is to use point sprites with vector angle used to map texture lookup (like in clouds)
//       all leaves would then be same size at same distance (see next)
//   - instead of point sprites tried using a fixed size rectangle and rotating the image to the angle
//     defined by the base vector
//     o works somewhat but need to set the end of the leaf to the center of the image and increase the image size
//       so that the rotated leaf isn't clipped
//     o also, rotation angle doesn't always seem correct and changes with aspect ratio
// 5) spline issues
//   - offsets don't follow branch curvature when spline is applied
//     o tried generating parent spline in opengl and using that for child start positions
//      - but that didn't work because spline in shader uses points in screen space vs model space
//     o could project points using modelviewproj matrix in c++
//   - too much curvature on initial branch from trunk
// 6) width offset sometimes disconnects branches from parent
//   - also, direction of side branch should be on same side as offset
//************************************************************
// classes PlantPoint, PlantMgr
//************************************************************
extern double Hscale, Drop, MaxSize,Height,Phi,Density,Randval,Srand;
extern double ptable[];
extern Point MapPt;
extern double  zslope();
extern NameList<LongSym*> POpts;

extern void inc_tabs();
extern void dec_tabs();
extern char tabs[];
extern int addtabs;

extern int test2,test3,test4;
static double sval=0;
static double cval=0;
static double mind=0;
static double htval=0;
static int ncalls=0;
static int nhits=0;

static double roff_value=1e-6;//0.5*PI;
static double roff2_value=0.5;
static double ht_offset=0.0;
static double threshold=1;
static int cnt=0;
static int tests=0;
static int pts_fails=0;
static int dns_fails=0;

static TerrainData Td;
static PlantMgr *s_mgr=0;
static int hits=0;
static int branch_nodes;
static int trunk_nodes;
static int line_nodes;

static double min_draw_width=1;
static double min_render_pts=1; // for render
static double min_adapt_pts=3; //  for adapt - increase resolution only around nearby plants

#define USE_AVEHT
#define MIN_VISITS 1
#define TEST_NEIGHBORS 1
//#define TEST_PTS 
//#define DUMP
//#define SHOW
//#define DEBUG_PMEM

#define MIN_DRAW_WIDTH min_draw_width // varies with scene quality
#define MIN_LINE_WIDTH MIN_DRAW_WIDTH
#define MIN_TRIANGLE_WIDTH 2
#define MIN_SPLINE_WIDTH 4*MIN_TRIANGLE_WIDTH

#ifdef DUMP
static void show_stats()
{
	if(s_mgr)
		s_mgr->dump();
	cout<<"calls="<<ncalls<< " hits="<<nhits<<endl;
}
#endif

static int randval=0;
class SData {
public:
    double v;
    double f;
    double value()   { return v;}
};
#define SDATA_SIZE 1024
static SData   sdata[SDATA_SIZE];
static ValueList<SData*> slist(sdata,SDATA_SIZE);
static int          scnt;

//************************************************************
// PlantMgr class
//************************************************************
//	arg[0]  levels   		scale levels
//	arg[1]  maxsize			size of largest craters
//	arg[2]  mult			size multiplier per level
//	arg[3]  density			density or dexpr
//
//-------------------------------------------------------------
PlantMgr::PlantMgr(int i,TNplant *p) : PlacementMgr(i,2*PERMSIZE)
{
#ifdef DUMP
	if(!s_mgr)
		add_finisher(show_stats);
#endif
	type|=SPRITES;
	plant=p;
	s_mgr=this;
	roff=roff_value;
	roff2=roff2_value;
	level_mult=0.2;
	slope_bias=0;
	ht_bias=0;
	lat_bias=0;
	dexpr=0;
	instance=0;

	set_ntest(TEST_NEIGHBORS);
}
PlantMgr::~PlantMgr()
{
  	if(finalizer()){
  		s_mgr=0;
#ifdef DEBUG_PMEM
  		printf("PlantMgr::free()\n");
#endif
	}
}

//-------------------------------------------------------------
// PlantMgr::init()	initialize global objects
//-------------------------------------------------------------
void PlantMgr::init()
{
#ifdef DEBUG_PMEM
  	printf("PlantMgr::init()\n");
#endif
	PlacementMgr::init();
	ncalls=0;
	nhits=0;
	cnt=0;
	ss();
  	reset();
 }

void PlantMgr::eval(){	
	PlacementMgr::eval(); 
	if(!first() || !scnt)
	    return;
	for(int i=0;i<scnt;i++){
	    slist.base[i]=sdata+i;
	}
	slist.size=scnt;
	slist.sort();
	
	for(int i=0;i<scnt;i++){
	   double f=slist.base[i]->f;
	   cval=f;
	}
}

void PlantMgr::reset(){
	PlacementMgr::reset();
	tests=pts_fails=dns_fails=0;
	cval=0;
	scnt=0;
}
//-------------------------------------------------------------
// PlantPoint::set_terrain()	impact terrain
//-------------------------------------------------------------
bool PlantMgr::valid()
{ 
    tests++;
   
#ifdef TEST_PTS
	double mps=min_render_pts;
	if(TheScene->adapt_mode())
		mps=min_adapt_pts;
	Point pv=MapPt;
	double d=pv.length();
	
	double r=TheMap->radius*size;
	double f=TheScene->wscale*r/d;
    double pts=f;
    if(pts<mps){
    	pts_fails++;
    	return false;
    }
#endif  
    // TODO set density biases here ?

    if(density<=0){
    	dns_fails++;
    	return false;
    }
	return true;
}

bool PlantMgr::setProgram(){
	
	//GLSLMgr::checkForErrors();
	TerrainProperties *tp=Td.tp;
	
	TNplant::textures=0;
	
	for(int i=0;i<tp->plants.size;i++){
		tp->plants[i]->setProgram();
	}

	branch_nodes=0;
	trunk_nodes=0;
	line_nodes=0;
	
	double twilite_min=-0.2; // full night
	double twilite_max=0.2;  // full day
	
	char defs[1024]="";
//#ifdef TEST
	if(test2)
	sprintf(defs,"#define TEST\n");
//#endif
	if(Render.textures()){
		sprintf(defs+strlen(defs),"#define NTEXS %d\n",TNplant::textures);
		if(TNplant::textures>0 && Render.bumps())
			sprintf(defs+strlen(defs),"#define BUMPS\n",TNplant::textures);
	}
	else
		sprintf(defs+strlen(defs),"#define NTEXS 0\n");
		
	sprintf(defs+strlen(defs),"#define NLIGHTS %d\n",Lights.size);
	if(Render.haze())
		sprintf(defs+strlen(defs),"#define HAZE\n");

    bool do_shadows=Raster.shadows() && (Raster.twilight() || Raster.night());
	if(do_shadows && !TheScene->light_view()&& !TheScene->test_view() &&(Raster.farview()))
		sprintf(defs+strlen(defs),"#define SHADOWS\n");

	GLSLMgr::setDefString(defs);

	GLSLMgr::input_type=GL_LINES;
	//GLSLMgr::input_type=GL_TRIANGLES;
	GLSLMgr::output_type=GL_TRIANGLE_STRIP;
	GLSLMgr::tesslevel=8;
	GLSLMgr::max_output=128;  // special case
	GLSLMgr::loadProgram("plants.gs.vert","plants.frag","plants.geom");
	
	GLhandleARB program=GLSLMgr::programHandle();
	if(!program){
		cout<<"PlantMgr::setProgram - failed to load program"<<endl;
		return false;
	}
	
	char str[MAXSTR];

	for(int i=0;i<TNplant::textures;i++){
		sprintf(str,"samplers2d[%d]",i);
		glUniform1iARB(glGetUniformLocationARB(program,str),i);
	}


	GLSLVarMgr vars;
	
	Planetoid *orb=(Planetoid*)TheScene->viewobj;
	
	Color diffuse=orb->diffuse;
	Color ambient=orb->ambient;
	Color shadow=orb->shadow_color;
	Color haze=Raster.haze_color;
	
	vars.newFloatVec("Diffuse",diffuse.red(),diffuse.green(),diffuse.blue(),diffuse.alpha());
	vars.newFloatVec("Ambient",ambient.red(),ambient.green(),ambient.blue(),ambient.alpha());
	vars.newFloatVec("Shadow",shadow.red(),shadow.green(),shadow.blue(),shadow.alpha());
	vars.newFloatVec("Haze",haze.red(),haze.green(),haze.blue(),haze.alpha());
	vars.newFloatVar("haze_zfar",Raster.haze_zfar);
	vars.newFloatVar("haze_grad",Raster.haze_grad);
	vars.newFloatVar("haze_ampl",Raster.haze_hf);
	vars.newFloatVar("bump_delta",1e-3);
	vars.newFloatVar("bump_ampl",0.025);
	vars.newFloatVar("twilite_min",twilite_min);
	vars.newFloatVar("twilite_max",twilite_max);

	vars.newBoolVar("lighting",Render.lighting());
	
	double zn=TheScene->znear;
	double zf=TheScene->zfar;
	double ws1=1/zn;
	double ws2=(zn-zf)/zf/zn;

	vars.newFloatVar("ws1",ws1);
	vars.newFloatVar("ws2",ws2);

	vars.setProgram(program);
	
	vars.loadVars();

	GLSLMgr::setProgram();
	GLSLMgr::loadVars();
		
	int n=Plant::plants.size;
	int l=randval;
	
	switch(TheScene->quality){
	case DRAFT:
		min_draw_width=1;
		break;
	case NORMAL:
		min_draw_width=0.65;
		break;
	case HIGH:
		min_draw_width=0.5;
		break;
	case BEST:
		min_draw_width=0.25;
		break;	
	}
	
	glEnable(GL_BLEND);
	//TNplant::clearStats();

	TNLeaf::free();


	for(int i=n-1;i>=0;i--){ // Farthest to closest
		PlantData *s=Plant::plants[i];
		
		int id=s->get_id();
		
		TNplant *plant=s->mgr->plant;
		//cout<<plant->size<<" "<<plant->size*plant->base_drop<<endl;
		plant->size=s->radius; // placement size
		plant->base_point=s->base*(1-plant->size*plant->base_drop);
		plant->pntsize=s->pntsize;
		
		Point pp=Point(s->point.x,s->point.y,s->point.x);
		
		double r=Random(pp);
		randval=256*fabs(r)+id;
		plant->emit();
	}

	TNLeaf::render();

	randval=l;
#ifdef SHOW_BRANCH_STATS
	for(int i=0;i<tp->plants.size;i++){
		tp->plants[i]->showStats();
	}
#endif

	return true;
}
//-------------------------------------------------------------
// PlantMgr::make() factory method to make Placement
//-------------------------------------------------------------
Placement *PlantMgr::make(Point4DL &p, int n)
{
    return new PlantPoint(*this,p,n);
}

//************************************************************
// class PlantPoint
//************************************************************
PlantPoint::PlantPoint(PlantMgr&m, Point4DL&p,int n) : Placement(m,p,n)
{
	ht=0;
	aveht=0;
	wtsum=0;
	dist=1e16;
	visits=0;
	place_hits=0;
	mind=1e16;
	mgr=&m;
	
	instance=m.instance;

	flags.s.active=false;
}

//-------------------------------------------------------------
// PlantPoint::set_terrain()	impact terrain
//-------------------------------------------------------------
bool PlantPoint::set_terrain(PlacementMgr &pmgr)
{
	double d=pmgr.mpt.distance(center);
	d=d/radius;
	PlantMgr &mgr=(PlantMgr&)pmgr;
	sval=0;
	visits++;
	
	if(d>threshold)
		return false;
	if(!flags.s.valid)
		return false;

    flags.s.active=true;
	sval=lerp(d,0,threshold,0,1);

    double wt=1/(0.01+sval);
    aveht+=Height*wt;
	
    wtsum+=wt;

	if(d<dist){
		ht=Height;
		dist=d;
		mind=d;
		place_hits++;
	}
	hits++;

 	sdata[scnt].v=hid;
   	sdata[scnt].f=sval;
  	if(scnt<SDATA_SIZE)
  	    scnt++;
	return true;
}

void PlantPoint::reset(){
	flags.s.active=0;
	visits=0;
	place_hits=0;
	dist=1e6;
	aveht=0;
	wtsum=0;
}
void PlantPoint::dump(){
	if(flags.s.valid && flags.s.active){
		Point4D p(point);
		p=center;
		char msg[256];
		char vh[32];
		sprintf(vh,"%d:%d",visits,place_hits);
		sprintf(msg,"%-3d %-2d %-8s dist:%-0.4f ht:%-1.6f x:%-1.5f y:%-1.5f z:%1.5f",cnt++,flags.l,vh,dist,ht,p.x,p.y,p.z);
		cout<<msg<<endl;
	}
}
//==================== PlantData ===============================
PlantData::PlantData(PlantPoint *pnt,Point bp,double d, double ps){
	type=pnt->type;
	ht=pnt->ht;
	
	point=pnt->point;
	
	aveht=pnt->aveht/pnt->wtsum;
	base=bp;
	
	radius=pnt->radius;
    pntsize=ps;
 	distance=d;//TheScene->vpoint.distance(t);
	visits=pnt->visits;
	instance=pnt->instance;
	mgr=pnt->mgr;
}

void PlantData::print(){
	char msg[256];
	Point pp=Point(point.x,point.y,point.z);
	double h=TheMap->radius*TheMap->hscale;
	sprintf(msg,"visits:%-1d ht:%-1.4f aveht:%-1.4f dist:%g",visits,h*ht/FEET,h*aveht/FEET,distance/FEET);
	cout<<msg<<endl;
	
}
//===================== Plant ==============================
ValueList<PlantData*> Plant::plants;
//-------------------------------------------------------------
// Plant::Plant() Constructor
//-------------------------------------------------------------
Plant::Plant(int l, TNode *e)
{
	type=l;
	plant_id=get_id();
	expr=e;
	valid=false;
}

void Plant::reset()
{
	plants.free();
	TNplant::textures=0;

	TerrainProperties *tp=Td.tp;
	for(int i=0;i<tp->plants.size;i++){
		Plant *plant=tp->plants[i];
		plant->mgr()->free_htable();
	}
}

//-------------------------------------------------------------
// Plant::collect() collect valid plant points
//-------------------------------------------------------------
void Plant::collect()
{
	
#ifdef TEST_PTS
	if(tests>0)
		cout<<"tests:"<<tests<<" fails  pts:"<<100.0*pts_fails/tests<<" %"<<" dns:"<<100.0*dns_fails/tests<<endl;
#endif
	int new_plants=0;
	int bad_pts=0;
#ifdef SHOW_STATS	
	int trys=0;
	int visits=0;
	int bad_visits=0;
	int bad_valid=0;
	int bad_active=0;
#endif	

	TerrainProperties *tp=Td.tp;
	for(int i=0;i<tp->plants.size;i++){
#ifdef SHOW_STATS	
		trys=visits=bad_visits=bad_valid=bad_active=bad_pts=new_plants=0;
#endif
		Plant *plant=tp->plants[i];
		plant->mgr()->ss();
		PlantPoint *s=(PlantPoint*)plant->mgr()->next();
	while(s){
#ifdef SHOW_STATS
		trys++;		
		if(s->visits<MIN_VISITS)
			bad_visits++;
		if(!s->flags.s.valid)
			bad_valid++;
		if(!s->flags.s.active)
			bad_active++;
#endif	
		if(s->visits>=1 && s->flags.s.valid && s->flags.s.active){
			Point4D	p(s->center);
			Point pp=Point(p.x,p.y,p.z);
			Point ps=pp.spherical();
#ifdef USE_AVEHT
			double ht=s->aveht/s->wtsum;
#else
			double ht=s->ht;
#endif			
			Point base=TheMap->point(ps.x, ps.y,ht); // spherical-to-rectangular
			Point bp=Point(-base.x,base.y,-base.z);  // Point.rectangular has 180 rotation around y
			double d=bp.distance(TheScene->vpoint);  // distance	
			double r=TheMap->radius*s->radius;
			double f=TheScene->wscale*r/d;
		    double pts=f;
		    double minv=MIN_VISITS; 
		    bool pts_test=true;
#ifdef TEST_PTS
		    minv=lerp(pts,min_render_pts,10*min_render_pts,1,2*MIN_VISITS); 
		    if(pts<min_render_pts){
		    	pts_test=false;
		    	bad_pts++;
		    }
#endif
		    if(pts_test && s->visits>=minv){
		    	new_plants++;
		    	plants.add(new PlantData((PlantPoint*)s,bp,d,pts));
		    }
		}
		s=plant->mgr()->next();
	  }	
#ifdef SHOW_STATS
	double usage=100.0*trys/plant->mgr()->hashsize;
	double badvis=100.0*bad_visits/trys;
	double badactive=100.0*bad_active/trys;
	double badpts=100.0*bad_pts/trys;
	cout<<plant->name()<<" plants "<<new_plants<<" tests:"<<trys<<" %hash:"<<usage<<" %inactive:"<<badactive<<" %small:"<<badpts<<" %visited:"<<100-badvis<<endl;
#endif

	} // next plant
	//}
    cout<<"total plants collected:"<<plants.size<<endl;
	plants.sort();
#ifdef SHOW
	//int pnrt_num=plants.size-1;
	int pnrt_num=min(2,plants.size-1);

	for(int i=pnrt_num;i>=0;i--){
		cout<<i<<" ";
		plants[i]->print();	
	}
#endif
	
}
//-------------------------------------------------------------
// Plant::eval() evaluate TNtexture string
//-------------------------------------------------------------
void Plant::eval()
{
	int mode=CurrentScope->passmode();
	CurrentScope->set_spass();
	expr->eval(); // TNplant.eval()
	CurrentScope->set_passmode(mode);
}

bool Plant::setProgram(){
	clearStats();
	return expr->setProgram();
}
bool Plant::initProgram(){
	return false;
}
void Plant::clearStats(){
	expr->clearStats();
}
void Plant::showStats(){
	expr->showStats();
}

//===================== TNplant ==============================
int TNplant::textures=0;
double TNplant::norm_max=2;
double TNplant::norm_min=1e-5;
//************************************************************
// TNplant class
//************************************************************
TNplant::TNplant(TNode *l, TNode *r) : TNplacements(0,l,r,0)
{
	TNarg *arg=left;
	TNarg *node=arg->left;
	if(node->typeValue() == ID_STRING){		
		setName(((TNstring*)node)->value);
		left=arg->next();
		left->setParent(this);
		arg->right=0;
		delete arg;	
	}
	plant=0;
	branches=0;
	pntsize=0;
	maxdensity=0;
	radius=0;
	size=0;
	plant_id=0;
	last_branch=0;
	leaf=0;
	base_drop=0;
	width_scale=1;
	rendered=0;
	
    mgr=new PlantMgr(PLANTS|NOLOD,this);
}

//-------------------------------------------------------------
// TNplant::~TNplant() destructor
//-------------------------------------------------------------
TNplant::~TNplant()
{
	DFREE(plant);
}

//-------------------------------------------------------------
// TNplant::applyExpr() apply expr value
//-------------------------------------------------------------
void TNplant::applyExpr()
{
   if(expr){
	    TNplant* sprt=(TNplant*)expr;
	    mgr->type=type;
		DFREE(left);
		left=expr->left;
		left->setParent(this);
		expr=0;
	}
	if(right)
		right->applyExpr();
 }
//-------------------------------------------------------------
// TNplant::init() initialize the node
//-------------------------------------------------------------
void TNplant::init()
{
	PlantMgr *smgr=(PlantMgr*)mgr;
    branches=0;
	if(plant==0)
		plant=new Plant(type,this);
	smgr->set_first(1);
	//smgr->setHashsize(2*PERMSIZE);
	smgr->init();
	
	//TNplacements::init();
	double arg[11];
	INIT;
	TNarg &args=*((TNarg *)left);
	int n=getargs(&args,arg,11);
	
	if(n>0) mgr->levels=(int)arg[0]; 	// scale levels
	if(n>1) mgr->maxsize=arg[1];     	// size of largest 
	if(n>2) mgr->mult=arg[2];			// random scale multiplier
	if(n>3) mgr->level_mult=arg[3];     // scale multiplier per level
	if(n>4) maxdensity=arg[4];
	if(n>5) smgr->slope_bias=arg[5];
	if(n>6) smgr->ht_bias=arg[6];
	if(n>7) smgr->lat_bias=arg[7];
	if(n>8) base_drop=arg[8];

	if(right)
	   right->init();

	getLeaf();
	getLastBranch();
}

void TNplant::getLeaf() {
	TNBranch *p = (TNBranch*)right;
	while (p && p->typeValue() != ID_LEAF) {
		p=p->right;
	}
	if(p && p->typeValue() == ID_LEAF)
		leaf=(TNLeaf*)p;
}

void TNplant::getLastBranch() {
	TNBranch *p = (TNBranch*)right;
	TNBranch *n=p;
	while (n && n->typeValue() == ID_BRANCH) {
		TNBranch *t=n->right;
		if(!t || t->typeValue()!=ID_BRANCH){
			last_branch=n;
			break;
		}
		n=n->right;
	}
}
void TNplant::set_id(int i){
	BIT_OFF(type,PID);
	type|=i&PID;
}
//-------------------------------------------------------------
// TNplant::eval() evaluate the node
//-------------------------------------------------------------
void TNplant::eval()
{	
	SINIT;
	if(right)
		right->eval();
	if(!isEnabled()){
		return;
	}
	if(CurrentScope->rpass()){
		int size=Td.tp->plants.size;
		plant_id=size;	
		mgr->instance=plant_id;
		if(plant)
			plant->set_id(size);		
		Td.add_plant(plant);		
		return;
	}	
	if(!CurrentScope->spass()){
		return;
	}
	Color c =Color(1,1,1);
	PlantMgr *smgr=(PlantMgr*)mgr;

	htval=Height;
	ncalls++;
	
	double density=maxdensity;
	MaxSize=mgr->maxsize;
	radius=TheMap->radius;
	TerrainProperties *tp=TerrainData::tp;
		
	mgr->type=type;
	if(smgr->slope_bias){
		double slope=8*zslope();
		double f=2*lerp(fabs(smgr->slope_bias)*slope,0,1,-smgr->slope_bias,smgr->slope_bias);
#ifdef DEBUG_SLOPE_BIAS
		if(ncalls%100==0)
			cout<<"slope:"<<slope<<" f:"<<f<<endl;
#endif
		density+=f;
	}
	if(smgr->ht_bias){
		double f=2*lerp(8*fabs(smgr->ht_bias)*Height,-1,1,-smgr->ht_bias,smgr->ht_bias);
		density+=f;
	}
	if(smgr->lat_bias){
		double f=lerp(fabs(smgr->lat_bias)*fabs(2*Phi/180),0,1,-smgr->lat_bias,+smgr->lat_bias);
		density+=f;
	}
    density*=maxdensity;
	density=clamp(density,0,1);
	density=sqrt(density);

	mgr->density=density;
	double hashcode=(mgr->levels+
		            1/mgr->maxsize
					+11*tp->id
					+7*plant_id
					);
	mgr->id=(int)hashcode+mgr->type+PLANTS+hashcode*TheNoise.rseed;
	
	sval=0;
	hits=0;
	cval=0;
	scnt=0;

	smgr->eval();  // calls PlantPoint.set_terrain
   
	if(hits>0){ // inside target radius
		nhits++;
		double x=1-cval;
#ifdef COLOR_TEST
//		if(instance==0)
//			c=Color(x,0,1);
//		else
			c=Color(0,x,1);
		Td.diffuse=Td.diffuse.mix(c,0.9);
#endif
#ifdef DENSITY_TEST
		x=1/(cval+1e-6);
		x=x*x;//*x*x;
		Td.density+=lerp(cval,0,0.2,0,0.05*x);
#endif
	}
 }

void TNplant::clearStats(){
	for(int i=0;i<MAX_BRANCHES;i++){
		for(int j=0;j<MAX_PLANT_DATA;j++)
			stats[i][j]=0;
	}
}
void TNplant::showStats(){
	for(int i=0;i<branches;i++){
		cout<<"plant["<<name_str<<"] branch["<<i<<"]"
		<<" skipped:"<<stats[i][0]
		<<" terminal:"<<stats[i][1]
	    <<" lines:"<<stats[i][2]
		<<" polygons:"<<stats[i][3]
		<<" splines:"<<stats[i][4]
		<<" leafs:"<<stats[i][5]
		<<endl;
	}
}
void TNplant::addSkipped(int id){
	stats[id][0]++;	
}
void TNplant::addTerminal(int id){
	stats[id][1]++;	
}
void TNplant::addLine(int id){
	stats[id][2]++;	
}
void TNplant::addBranch(int id){
	stats[id][3]++;	
}
void TNplant::addSpline(int id){
	stats[id][4]++;	
}
void TNplant::addLeaf(int id){
	stats[id][5]++;	
}

//-------------------------------------------------------------
// TNtexture::valueString() node value substring
//-------------------------------------------------------------
void TNplant::valueString(char *s)
{
	if(strlen(name_str)>0)
		sprintf(s+strlen(s),"%s(\"%s\",",symbol(),name_str);
	else
		sprintf(s+strlen(s),"%s(",symbol());

	TNarg *arg=(TNarg*)left;
	while(arg){
		arg->valueString(s+strlen(s));
		arg=arg->next();
		if(arg)
			strcat(s,",");
	}
	strcat(s,")");
}

//-------------------------------------------------------------
// TNplant::save() archive the node
//-------------------------------------------------------------
void TNplant::save(FILE *f)
{
	char buff[1024];
	buff[0]=0;
	valueString(buff);
	//if(addtabs)
	    fprintf(f,"\n%s",tabs);
	fprintf(f,"%s",buff);
	if(right)
		right->save(f);
}

//-------------------------------------------------------------
// TNplant::save() archive the node
//-------------------------------------------------------------
void TNplant::saveNode(FILE *f)
{
	char buff[1024];
	buff[0]=0;
	valueString(buff);
	//if(addtabs)
	    fprintf(f,"\n%s",tabs);
	fprintf(f,"%s",buff);
}

void TNplant::emit(){
	// compensate for changes in scene fov and aspect to keep ht/width constant	
	// note: width_scale == 1 for med and large 0.6629 for wide
	width_scale=0.834729*TheScene->wscale/TheScene->aspect/TheScene->viewport[3];
    rendered=0;
	//lastn=randval;
	Randval=URAND;
	double length=size*base_point.length();	
	Point bot=base_point;
	norm=bot.normalize();
	glNormal3dv(norm.values());
			
	TNBRANCH *first_branch=(TNBRANCH*)right;
	if(right && right->typeValue() == ID_BRANCH) 
		first_branch=(TNBRANCH*)right;
	else
		return;
	double branch_size=length*first_branch->length;

	Point top=bot*(1+branch_size); // starting trunk size
	Point p1=bot;
	Point p2=top;
	
	double start_width=width_scale*pntsize;
		
	Point tip;
	tip.x=first_branch->width*start_width/TheScene->wscale;
	tip.y=0;
	tip.z=0;
	glDisable(GL_CULL_FACE);
	
	glVertexAttrib4d(GLSLMgr::TexCoordsID, 0, 0, 0,0); // Constants1
	//cout<<TheMap->radius*base_point.length()*start_width/length/TheScene->wscale<<endl;
	first_branch->fork(BASE_FORK,p1,p2-p1,tip,length,start_width,0);
	//cout<<rendered<<endl;
	
}

bool TNplant::setProgram(){

	TNBRANCH *first_branch=(TNBRANCH*)right;
	if(right && right->typeValue() == ID_BRANCH) 
		first_branch=(TNBRANCH*)right;
	else
		return false;
	TNBRANCH *branch=first_branch;
	while(branch && (branch->typeValue() == ID_BRANCH || branch->typeValue() == ID_LEAF)){
		branch->setProgram();
		branch=branch->right;
	}
	return true;
}

//===================== TNBranch ==============================
//************************************************************
// TNBranch class
//************************************************************

TNBranch::TNBranch(TNode *l, TNode *r, TNode *b) : TNbase(0,l,b,r)
{
	set_collapsed();
	TNarg *arg=left;
	TNarg *node=arg->left;
	if(node->typeValue() == ID_STRING){		
		setName(((TNstring*)node)->value);
		left=arg->next();
		if(left)
			left->setParent(this);
		arg->right=0;
		delete arg;	
	}
	level=0;
	maxlvl=0;
	branch_id=0;
	length=2;
	width=1;
	width_taper=0.75;
	length_taper=0.95;
	randomness=0.25;
	max_splits=4;
	first_bias=0;
	flatness=0.9;
	divergence=0.75;
	min_level=0;
	max_level=1;
	root=0;
	image=0;
	texname[0]=0;
	texture_id=0;
	texid=-1;
	instance=0;
	color_flags=0;
	alpha_texture=false;
}

void TNBranch::init(){
	double arg[12];
	if(!left)
		return;
	INIT;
	TNarg &args=*((TNarg *)left);
	int n=getargs(&args,arg,11);
	if(n>0)max_level=arg[0];
	if(n>1)max_splits=arg[1];
	if(n>2)length=arg[2];
	if(n>3)width=arg[3];
	if(n>4)randomness=arg[4];
	if(n>5)divergence=arg[5];
	if(n>6)flatness=arg[6];
	if(n>7)width_taper=arg[7];
	if(n>8)length_taper=arg[8];	
	if(n>9)first_bias=arg[9];
	if(n>10)min_level=arg[10];
	
	root=getRoot();
	level=0;
	branch_id=root->branches;
	root->branches+=1;
	setTexture();
	setColorFlags();
	//cout<<"plant:"<<root->nodeName()<<" branch:"<<nodeName()<<" texid:"<<texid<<" color_flags:"<<color_flags<<endl;
	
	if(right)
		right->init();
}

void TNBranch::invalidateTexture(){
	if(texture_id){
		glDeleteTextures(1,&texture_id);
		texture_id=0;
	}
}
bool TNBranch::setProgram(){
	if(!image || !image->valid()){
		return false;
	}	
	texid=root->textures++;
	char str[MAXSTR];
	glActiveTexture(GL_TEXTURE0+texid);
	if(texture_id==0){
		bool rgba_image=(image->gltype()==GL_RGBA)?true:false;
		alpha_texture=image->alpha_image();
		cout<<"rgba_image="<<rgba_image<<" alpha_image="<<alpha_texture<<endl;

		glGenTextures(1, &texture_id); // Generate a unique texture ID
		glBindTexture(GL_TEXTURE_2D, texture_id);
		glTexEnvf(GL_TEXTURE_FILTER_CONTROL, GL_TEXTURE_LOD_BIAS, -1);
		glTexParameteri(GL_TEXTURE_2D, GL_GENERATE_MIPMAP, GL_TRUE);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR_MIPMAP_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
		int w=image->width;
		int h=image->height;
		unsigned char* pixels=(unsigned char*)image->data;

		if(alpha_texture||rgba_image)
			glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, w, h, 0, GL_RGBA, GL_UNSIGNED_BYTE, pixels);
		else
			glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, w, h, 0, GL_RGB, GL_UNSIGNED_BYTE, pixels);
		
		cout<<"generating texture id:"<<texture_id<<" texid:"<<texid<<" alpha:"<<alpha_texture<<endl;

	}
	glBindTexture(GL_TEXTURE_2D, texture_id);
		
	return true;	
}

//-------------------------------------------------------------
// TNBranch::setImage(char *name) set image texture
//-------------------------------------------------------------
void TNBranch::setImage(char *name){
	if(strcmp(name,texname)){
		if(image)
			delete image;
		invalidateTexture();
		strcpy(texname,name);				
		image=images.load(texname,JPG);
		if(image)
			cout<<"image created for "<<texname<<endl;
		else
			cout<<"image file "<<texname<<" not found"<<endl;
	}
}

void TNBranch::setTexture(){
	if(base){
		TNarg *arg=((TNarg *)base);
		while(arg){
			TNode *node=arg->left;
			if(node->typeValue()==ID_STRING){
				setImage(((TNstring*)node)->value);
				if(image){
					texid=root->textures;
					root->textures++;
				}
				return;
			}			
			arg=arg->next();
		}
	}
}
void TNBranch::setColorFlags(){
	TNarg *arg;
	color_flags=0;
	Density=0;
	if(base){
		arg=(TNarg*)base;
		while(arg){
			if(arg->left->typeValue()==ID_COLOR){		
				color_flags=1;
				int comps=((TNcolor*)arg->left)->comps();
				if(comps==4)
					color_flags=2;
				return;
			}
			arg=arg->next();
		}
	}
}
void TNBranch::setColor(){
	TNarg *arg;
	if(base && color_flags){
		arg=(TNarg*)base;
		while(arg){
			S0.clr_cvalid();
			arg->left->eval();
			if(S0.cvalid()){
				glColor4d(S0.c.red(), S0.c.green(), S0.c.blue(), S0.c.alpha());
				return;
			}
			arg=arg->next();
		}
	}
}
Point TNBranch::setVector(Point vec, Point start, int lvl){

	Point v = vec.normalize();
	
	v.x += divergence * SRAND;
	v.y += divergence * SRAND;
	v.z += divergence * SRAND;

	v = v.normalize();
	if(flatness==0)
		return v;
	double g=flatness;
	if(lvl>1)
		g=fabs(flatness);
	Point n = root->norm + start;
	n = n.normalize();
	Point vp;
	double f = g;
	if (g > 0) {
		Point tp1 = n.cross(v); 
		vp = tp1.cross(n);
	}
	else {
		double s=SRAND;
		if(s>0)
		 vp= n.cross(v);
		else
		 vp= v.cross(n);
		f = -g;
	}
	vp = vp.normalize(); // projection of v along surface
	Point v1 = v * (1 - f);
	Point v2 = vp * f;
	v = v1 + v2;

	return v;

}
Point TNBranch::spline(double x, Point p0, Point p1, Point p2){
  Point c=p0;
  Point b=p1*4-p0*3-p2;
  Point a=p2*2+p0*2-p1*4;
  return a*x*x+b*x+c;
}

static Point lastv;
void TNBranch::fork(int opt, Point start, Point vec,Point tip,double s, double w, int lvl){
	int minlvl=0;
	if(min_level<0){
		TNBranch *parent=getParent();
		if(parent->typeValue()==ID_BRANCH)
			minlvl=parent->max_level+min_level+1;
	}
	else if(min_level>0)
		minlvl=min_level+1;
	if(lvl<minlvl)
		return;
	maxlvl=max_level+1;

	level=1;
    int l=randval;
    //w*=width;
    
	double splits=1;
	//if(!end_branch){
		splits=max_splits*(1+0.5*randomness*SRAND);
		if(first_bias) // add more branches at start of new branch fork
			splits*=first_bias;
		splits=splits<1?1:splits;
	//}
	for(int i=0;i<splits;i++){
		emit(opt,start,vec,tip,s,w,level);
	}
	randval=l+1;
}


void TNBranch::emit(int opt, Point base, Point vec, Point tip, double parent_size,
		double parent_width, int lvl) {

	int lev = lvl;
	lev++;
	
	int mode = opt;
	
	bool first_fork = (opt & FIRST_FORK);
	bool main_branch = (opt & FIRST_EMIT);
	bool last_level = lev==maxlvl;

	double topx = 0;
	double topy = 0;
	double botx = 1;
	double boty = 1;
	Point v, p0, p1, p2, bot,q;
	double a,b,x,y,off;
	int shader_mode=0;
	int poly_mode=GL_FILL;

	Color c;
	bool final_branch = branch_id == root->branches - 1;
	if(right && right->typeValue() == ID_LEAF)
		final_branch=true;
	double size_scale = 1.0;
	double child_width=parent_width;
	double child_size=parent_size;
	double top_offset=0;
	double bot_offset=0;
	double parent_length=parent_size * TheScene->wscale* root->width_scale/root->size;
	double child_length=parent_length;
	if (first_fork && lvl > 0) {	
		size_scale = length/parent_length;
		size_scale = size_scale > 1 ? 1 : size_scale;
		size_scale = size_scale < 0 ? 0 : size_scale;
		child_width*=size_scale;		
	}
	
	if (child_width < MIN_DRAW_WIDTH) {
		root->addSkipped(branch_id);
		return;
	} 
	Srand=SRAND;
	Point start=base;
	Density = ((double) lev) / maxlvl;
	p0=base-vec; // previous base
	p1=base;     // new base
	
	child_size *= 1 + 0.25 * randomness * SRAND;
	double cl=child_size * length;
  
    if (!main_branch && lvl > 0) {
		// add a random offset to each branch split
		double rb = randomness > 1 ? 1 : randomness;
		b = rb * URAND;			
		b = b <= 1 ? b : 1;
		//if(test2){ // try to correct for main branch curvature for start of side branches
		//	start=spline(0.5*(1-b),p0,p1,base+vec); // works: but same as linear
			//start=spline(0.5*(1-b),p0,p1,base+lastv);         // doesn't work
		//}
		//else{ // linear interpolation: no curvature correction
			start = p1 - vec * b;
		//}
		SRAND;
		// TODO: set max offset proportional parent_width/child_width
		double dw=(parent_width-child_width)/parent_width;
		bot_offset=dw*SRAND/size_scale;
		top_offset=bot_offset;	
		//cout<<dw<<" "<<bot_offset<<" "<<size_scale<<endl;

		v=setVector(vec,start,lvl);
		v = v * cl; // v = direction along last branch
	}
	else { // main branch
    	bot_offset=tip.z;
	    v=setVector(vec,start,lvl);
		v = v * cl; // v = direction along last branch
 	    lastv=v; // save main branch end 
   }
 		
	p2  = start + v; // new top
	bot = p2;       // new base	
	p0 = p0-TheScene->vpoint;   
	p1 = start-TheScene->vpoint;
	p2 = p2-TheScene->vpoint;
	v = bot-start; // new vector

	bool branch_tip=false;
	if (child_width > MIN_LINE_WIDTH) {
		if (child_width * width_taper < MIN_LINE_WIDTH) {
			opt = LAST_EMIT;
			root->addTerminal(branch_id);
		}
		//if(!last_level && lvl > maxlvl) 
		if(lev >= maxlvl) 
			opt = LAST_EMIT;
	    branch_tip=final_branch && (last_level || (opt&LAST_EMIT));
		   
        if(isPlantLeaf()){  // leaf mode
         	root->addLeaf(branch_id);
 
         	double angle=0;
			opt = LAST_EMIT;		
			shader_mode=LEAF_MODE;
			if(test3 || test4)
				poly_mode=GL_LINE;    
		    if(test4)
				shader_mode = LINE_MODE;
		    
			setColor();
			Color c=S0.c;
			int alpha=0;

			double depth=TheScene->vpoint.distance(bot);
			child_size = length*FEET/12; // inches
			child_size *= 1 + 0.5 * randomness * SRAND;

			alpha=alpha_texture?4:0;
			double size=root->width_scale*TheMap->radius*TheScene->wscale*child_size/depth;
			double width_ratio=0.5*width;

			root->rendered++;
	
			if(shader_mode==LEAF_MODE && poly_mode==GL_FILL)
				TNLeaf::collect(p1,p2,Point(0,size,width_ratio),Point(color_flags|alpha, texid, poly_mode),c);
			else{
				glVertexAttrib4d(GLSLMgr::CommonID1, 0, size, 0, 0); // Constants1		
				glVertexAttrib4d(GLSLMgr::TexCoordsID, width_ratio, color_flags|alpha, texid, shader_mode);
				
				glPolygonMode(GL_FRONT_AND_BACK, poly_mode);			
				glBegin(GL_LINES);
				glVertex4d(p1.x, p1.y, p1.z, 0);
				glVertex4d(p2.x, p2.y, p2.z, 0);
				glEnd();
			}

        }     
        else if (child_width > MIN_TRIANGLE_WIDTH){ // branch mode
    		double nscale=lerp(child_width,MIN_LINE_WIDTH,10*MIN_TRIANGLE_WIDTH,TNplant::norm_min,TNplant::norm_max);

			double w1 = child_width/TheScene->wscale;
			double w2 = w1*width_taper;
			//cout<<parent_length<<endl;

			// for 3d calculate equivalent dz for dw 
//			Point pt=Point(botx,boty,pt1.z);
//			Point pp=TheScene->unProject(pt);
//			cout<<"x:"<<pp.x<<" y:"<<pp.y<<" z:"<<pp.z<<" r:"<<pp.x/pp.z<<endl;
//          so ratio~=-0.154 dz ~= dw/0.154

			shader_mode=RECT_MODE;
			if(Render.geometry() && child_width > MIN_SPLINE_WIDTH){
//#ifdef TEST
//				shader_mode=THREED_MODE;
//#else
				shader_mode=SPLINE_MODE;
//#endif
				root->addSpline(branch_id);
			}
			else
				root->addBranch(branch_id);
			if(test3 || test4)
				poly_mode=GL_LINE;    
			if(test4)
				shader_mode = LINE_MODE;

			setColor();

			tip.x = topx;
			tip.y = topy;
			tip.z = top_offset;
			root->rendered++;
			glVertexAttrib4d(GLSLMgr::TexCoordsID, nscale, color_flags, texid, shader_mode);
			glPolygonMode(GL_FRONT_AND_BACK, poly_mode);

			glVertexAttrib4d(GLSLMgr::CommonID1, w1, w2, bot_offset,top_offset); // Constants1	
			glVertexAttrib4d(GLSLMgr::CommonID2, p0.x, p0.y, p0.z, 0); // Constants2
			glBegin(GL_LINES);
			glVertex4d(p1.x, p1.y, p1.z, bot_offset);
			glVertex4d(p2.x, p2.y, p2.z, top_offset);
			glEnd();
        }
        else{ // line mode
        	double nscale=TNplant::norm_min;
        	root->rendered++;
        	root->addLine(branch_id);
        	setColor();

			glVertexAttrib4d(GLSLMgr::TexCoordsID, nscale, color_flags, texid, LINE_MODE);
			glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);			
			glBegin(GL_LINES);
			glVertex4d(p1.x, p1.y, p1.z, 0);
			glVertex4d(p2.x, p2.y, p2.z, 0);
			glEnd();
        }
		glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
	}
	if(branch_tip && right && right->typeValue() == ID_LEAF)
		((TNLeaf*) right)->emit(FIRST_FORK, bot, v, tip, child_size, child_width, lev);
		
	if (opt & LAST_EMIT) 
		return;
	
	int splits = max_splits * (1 + 0.5 * randomness * SRAND);	
	splits = splits >= 1 ? splits : 1;

	if(last_level)
		splits=1;

	child_width *= width_taper;
	child_size *= length_taper;

	emit(FIRST_EMIT, bot, v, tip, child_size, child_width, lev);
	for (int i = 1; i < splits; i++) {
		emit(0, bot, v, tip, child_size, child_width, lev);
	}
	if (!right || right->typeValue() != ID_BRANCH)
		return;
	TNBranch *child = (TNBranch*) right;

	child->fork(FIRST_FORK, bot, v, tip, child_size, child_width, lev);
	
}

TNplant* TNBranch::getRoot() {
	NodeIF *p = getParent();
	while (p && p->typeValue() != ID_PLANT) {
		p=p->getParent();
	}
	if(p && p->typeValue() == ID_PLANT)
		return p;
	return 0;
}
void TNBranch::valueString(char *s){
	if(strlen(name_str)>0)
		sprintf(s+strlen(s),"%s(\"%s\",",symbol(),name_str);
	else
		sprintf(s+strlen(s),"%s(",symbol());
	TNbase::valueString(s);
}
void TNBranch::save(FILE *f){
	fprintf(f,"\n%s",tabs);
	if(strlen(name_str)>0)
		fprintf(f,"%s(\"%s\"",symbol(),name_str);
	else
		fprintf(f,"%s(",symbol());
	if(left){
		fprintf(f,",");
		left->save(f);
	}
	fprintf(f,")");
	if(base){
		fprintf(f,"[");
		base->save(f);
		fprintf(f,"]");
	}
	if(right)
		right->save(f);
}
void TNBranch::saveNode(FILE *f){
	TNbase::saveNode(f);
}
void TNBranch::eval(){
	if(right)
		right->eval();
}

//===================== TNleaf ==============================
//************************************************************
// TNLeaf class
//************************************************************
ValueList<LeafData*> TNLeaf::leafs;

double LeafData::distance() { 
	//return 0.5*(data[0].z+data[1].z);
	return data[0].z;

}

void  LeafData::render(){
	glVertexAttrib4d(GLSLMgr::CommonID1, data[2].x, data[2].y, 0, 0); // Constants1		
	glVertexAttrib4d(GLSLMgr::TexCoordsID, data[2].z, data[3].x, data[3].y, LEAF_MODE);
	glColor4d(c.red(), c.green(), c.blue(), c.alpha());
	glPolygonMode(GL_FRONT_AND_BACK, data[3].z);			
	glBegin(GL_LINES);
	glVertex4d(data[0].x, data[0].y, data[0].z, 0);
	glVertex4d(data[1].x, data[1].y, data[1].z, 0);
	glEnd();

}

TNLeaf::TNLeaf(TNode *l, TNode *r, TNode *b) : TNBranch(l,r,b){
	
}
void TNLeaf::render(){
	leafs.sort();
	for(int i=leafs.size-1;i>=0;i--){ // Farthest to closest
		LeafData *s=TNLeaf::leafs[i];
		s->render();
	}
}
