#include "SceneClass.h"
#include "RenderOptions.h"
#include "Plants.h"
#include "Util.h"
#include "MapNode.h"
#include "ModelClass.h"
#include "AdaptOptions.h"
#include "FileUtil.h"
#include "GLSLMgr.h"
#include "Effects.h"
#include "TerrainClass.h"

#define ENABLE_DATA_CACHING

#define USE_AVEHT
#define MIN_VISITS 1
#define TEST_NEIGHBORS 1
#define TEST_PTS 
//#define DUMP
//#define SHOW
//#define DEBUG_PMEM

//#define SHOW_PLANT_STATS
//#define SHOW_BRANCH_STATS
//#define SHOW_BRANCH_TIMING
//#define DEBUG_SLOPE_BIAS
//#define DEBUG_TEST_PTS 
//#define PSCALE TheMap->radius
#define PSCALE 0.004

#define SRAND 	(rands[PERM((randval++))])
#define URAND 	(rands[PERM((randval++))]+0.5)

#define FIRST_FORK  1
#define FIRST_EMIT  2
#define LAST_EMIT   4
#define LAST_FORK   8
#define BASE_FORK   16

#define ENABLE_3D
// Basic algorithm
// 1) TNplant class implemented similar to sprites, craters etc (i.e placements)
//    Primary task is to generate a set of surface positions to spawn plant instances
// 2) TNbranch class creates a branching pattern for each plant placement
//    - Branches are implemented as 3d points which are projected into eye space then screen space
//    - successive branch levels are generated by calling "emit" recursively 
//      (or fork on first call if multiple branch types exist)
// 3) in screen space either a line (with width) or a polygon is drawn between connecting branch points
// 4) if a polygon is used base and tip parameter points are calculated based on the angle of the branch
//    - distance between tip points is less than that between base points to simulate branch taper
// 5) in 2d mode lighting (branch curvature) is emulated by changing normal from left to right along branch
//   - in the center normal faces directly out to eye
//   - in 3d mode surface normals of cone side panels are used to generate a more accurate shading model
// TODO: 
// 1) Better branching model (DONE)
//  Currently all branches spawn from the same point in screen space
//  Improve this by trying the following:
//  a) allow branches to spawn at random locations along parent stem vector (DONE)
//    - set 'start' position somewhere between top and base using random variable
//    - problem: in spline mode placements don't follow curve
//  b) place new branches at random offsets from center of parent branches (DONE)
//    - not implemented in 3d mode
//  c) don't require branch starting width to be the same as parents width (DONE)
//    - scale next segment width based on size of child branch
//  c) In multi-branch cases have a minimum level to start producing new branches and max level to stop (DONE)
//    - min level prevents branches from forming lower in parent trunk
//    - child branches should form only towards the tip of parent branches
// 2) implement geometry shader to improve performance (DONE)
// 3) add support for textures (DONE)
//   - optional: texture scale ?
// 4) add support for phase shading for textures (DONE)
//   - optional: user control of phase amplitude ?
// 5) implement TNLeaf class (DONE)
//    - only generate leaves at end of "terminal" branches
// 6) use a spline function when connecting levels on same branch (DONE)
//   - generate additional line segments between segment end points (no need for branching)
//   - use quadratic interpolation from last 3 points to smooth transition
// 7) implement 3d branches (DONE)
//   - generate a "cone" for each branch vector in geometry shader (16 side panels)
// 8) use lists to increase render speed (WONT DO)
//   - display lists actually degrade performance (at least when the vertex count is high)
//   - COMPILE followed by callList step very costly compared to just rendering directly (10x worse ?)
//   - if COMPILE skipped (just callList) performance is about the same as direct render for small model
// 9) generate wxWidgets classes for plants (DONE)
// 10) add support for shadows (DONE)
//  - 3d mode only
// 11) leaves
//  - leaf clusters (DONE)
//  - change DENSITY to go 0-1 from base to tip (DONE)
//  - method to make leaves alternate sides (DONE)
//  - support multiple leaf clusters per new branch (first bias) DONE
//  - vary leaf projection between eye plane and plane perpendicular to branch (flatness) DONE
//  - use image aspect to correctly set length to width ratio
//  - support NxN leaf textures (same as for sprites) DONE
//  - move start of leaf to surface of branch
// 12) branch data caching
//   if scene changes generate an array of cached data for each branch and leaf by traversing the plant tree
//   else play out the array using simple opengl calls
//   results:
//   - render time improves with/without shadows if scene is stationary with changing time (e.g. 20 vs 50 ms)
//   - but degradation in performance if moving (e.g 120 vs 50 ms)
//    o need to traverse plant tree but extra overhead required to free and build cache
//   - also see a subtle change in lighting if caching is enabled (a lighter lighter or darker depending on tod)
//
// BUGS/problems
// 1) don't get enough plants generated - not all color spots produce a new plant
//     o improvement: added extra argument in TNplant to increase size of "dot" (threshold test)
//     o improvement: moving visits++ before threshold test in set_terrain
// 2) far away plants (e.g. trees) look "denuded" (i.e. lack foliage) because smaller branches arn't drawn
//    - workaround: increase branch width with distance (using new RANGE variable)
// 3) multiple plants don't stack if "+" used to connect
//    - Preceding plant loses last branch
//    - works OK without "+" connection
// 4) TNLeaf issues
//   - found problem that rectangles were not being created correctly (slanted edges)
//     * fixed by creating projected vector in eye space vs. model space
//     * also fixes width/length problem (narrow leaves)
//     o but lines projected to or away from eye are smaller than those tangent to eye (at same depth)
//       so leaves are drawn with different sizes depending on orientation
//     o overall effect is ok, models young and older leaves on same branch but would be better to be
//       able to control this
//     o rotation angle doesn't always seem correct and changes with aspect ratio
// 5) spline issues
//   - offsets don't follow branch curvature when spline is applied
//   - offset sometimes disconnects branches from parent
// 6) 3d issues
//   - branch dimensions and shapes change when aspect ratio and size of window are changed (scales ok in 2d)
//   - trunk size can be very different between 2d and 3d
// 7) GUI issues
//   - adding a plant sometimes puts branch on lower plant 
//   - adding plant to terrain puts following elements in a sub-group
//     o removing also removes sub-group elements
//   - deleting branch can cause crash
//   - adding branch to (empty) plant causes crash
// 8) shadows
//   o don't show or ill defined unless view range is small (e.g. no distant hills)
//    - need to add extra shadow view that only includes visible or near plants
//   o shadows generated for leaves
//    - projection not correct (too small)
//    - no shadow if flatness=1 (orientation 100% towards eye)
//    - get white silhouette around leaves on ground shadows
//    - get black silhouette around leaves against sky
//    - sometimes get small shadow of same leaf at leaf base
//   o shadows generated for lines
//    - can't see unless line width increased >1
// 9) Shape
//   o plant shape doesn't scale correctly with size 
//   - sometimes branches are too wide (WRT) length when plant is added to surface
//   * fixed: caused by plant scale and width dependent on orbital size (map->radius)
//   - replaced map->radius with fixed constant (4e-3)
// 10) plant branches disappear if 3d-clouds are present
//   o fixed: removed call to GLSLMgr::max_output=4 in CloadLayer setProgram
// 11) plants are generated on or below water
//   - need to not generate plants in water
// 12) clusters
//   - not all leaves are in the same plane
//   * fixed: was using tilted vector for branch direction
//   - transparency not perfect
// 13) leaves don't show on far plants (branches show but have no foliage)
//   * improved
// 14) when multiple leaves are present secondary leaves are not connected to branch (suspended in air)
//   * improved: shortened vector connecting previous node by 90%
// 15) data caching (leaves)
//   o collect leaf data only when scene changes otherwise render collected data
//   o problems with shadows
//   - if color not enabled get shadow everywhere and render times double
//   - leaf shadows aren't rendered
//   
// NOTES to self
// 1) Branch texture images
//   - If tiled image is created from a photo it will only show the front half of full 3d map
//   - to emulate 3d need to multiply xz tex coords by 2 (maps 2 copies of tiled image around branch)
//   - this works for normal images but for multidim sprite panels sometimes get a visual discontinuity 
//     o ogl doesn't seem to be able to wrap borders of interior images to avoid this
//   - one idea is to start with a phase away from the viewpoint and only use a 1to1 multplier
//     o this hides the discontinuity but we loose half the available image content (since half is hidden behind the branch)
//     o wrapping image this way also results in a 2x horizontal distortion
//   - a workaround is to duplicate and combine each sub-image before generating the sprite panel image
//     o each sub-image is twice as wide but we can see all available photo detail even with a 1x multiply
//************************************************************

extern double Drop, MaxSize,Height,Phi,Level,Randval,Srand,Range,Temp;
extern double ptable[];
extern Point MapPt;
extern double  zslope();
extern NameList<LongSym*> POpts;

extern void inc_tabs();
extern void dec_tabs();
extern char tabs[];
extern int addtabs;

extern int test1,test2,test3,test4,test5;
static double sval=0;
static double cval=0;
static double mind=0;
static double htval=0;
static int ncalls=0;
static int nhits=0;
static int oldmode=0;

static double roff_value=1e-6;//0.5*PI;
static double roff2_value=0.5;
static double ht_offset=0.0;
static double threshold=1;
static int cnt=0;
static int tests=0;
static int pts_fails=0;
static int dns_fails=0;

static TerrainData Td;
static PlantMgr *s_mgr=0;
static int hits=0;
static int branch_nodes;
static int trunk_nodes;
static int line_nodes;

static double min_draw_width=0.5;
static double min_render_pts=2; // for render
static double min_adapt_pts=4; //  for adapt - increase resolution only around nearby plants

#define MIN_DRAW_WIDTH min_draw_width // varies with scene quality
#define MIN_LINE_WIDTH MIN_DRAW_WIDTH
#define MIN_TRIANGLE_WIDTH 3*MIN_LINE_WIDTH
#define MIN_SPLINE_WIDTH 4*MIN_TRIANGLE_WIDTH

#ifdef DUMP
static void show_stats()
{
	if(s_mgr)
		s_mgr->dump();
	cout<<"calls="<<ncalls<< " hits="<<nhits<<endl;
}
#endif

static int randval=0;
class SData {
public:
    double v;
    double f;
    double value()   { return v;}
};
#define SDATA_SIZE 1024
static SData   sdata[SDATA_SIZE];
static ValueList<SData*> slist(sdata,SDATA_SIZE);
static int          scnt;
static bool update_needed=true;
static bool nocache=false;
LeafImageMgr leaf_mgr; // global image manager
BranchImageMgr branch_mgr; // global image manager

void show_plant_info()
{
	if(!Render.display(PLANTINFO))
		return;
	TheScene->draw_string(HDR1_COLOR,"------- plants ---------------------");
	TheScene->draw_string(DATA_COLOR,"types:%d branches:%d leaves:%d render:%3.1f ms",
			PlantMgr::stats[0],PlantMgr::stats[1],PlantMgr::stats[2],PlantMgr::render_time);
	TheScene->draw_string(DATA_COLOR,"drawn:%d lines:%d polygons:%d splines:%d",
			PlantMgr::stats[6],PlantMgr::stats[3],PlantMgr::stats[4],PlantMgr::stats[5]);
	TheScene->draw_string(HDR1_COLOR,"------------------------------------");
}
//************************************************************
// PlantMgr class
//************************************************************
//	arg[0]  levels   		scale levels
//	arg[1]  maxsize			size of largest craters
//	arg[2]  mult			size multiplier per level
//	arg[3]  density			density or dexpr
//
//-------------------------------------------------------------
bool PlantMgr::shadow_mode=false;
int PlantMgr::shadow_count=0;
int PlantMgr::stats[PLANT_STATS];
double PlantMgr::render_time;
double PlantMgr::pmax=1;
double PlantMgr::pmin=0;
int PlantMgr::adapt_tests=TEST_DENSITY;
bool PlantMgr::threed=true;
bool PlantMgr::spline=true;
bool PlantMgr::poly_lines=false;
bool PlantMgr::shader_lines=false;
bool PlantMgr::no_cache=false;
int PlantMgr::textures=0;

PlantMgr::PlantMgr(int i,TNplant *p) : PlacementMgr(i,2*PERMSIZE)
{
#ifdef DUMP
	if(!s_mgr)
		add_finisher();
#endif
	type|=SPRITES;
	plant=p;
	s_mgr=this;
	roff=roff_value;
	roff2=roff2_value;
	level_mult=0.2;
	slope_bias=0;
	ht_bias=0;
	lat_bias=0;
	dexpr=0;
	instance=0;

	set_ntest(TEST_NEIGHBORS);
}
PlantMgr::~PlantMgr()
{
  	if(finalizer()){
  		s_mgr=0;
#ifdef DEBUG_PMEM
  		printf("PlantMgr::free()\n");
#endif
	}
}

//-------------------------------------------------------------
// PlantMgr::init()	initialize global objects
//-------------------------------------------------------------
void PlantMgr::init()
{
	static bool finisher_added=false;
#ifdef DEBUG_PMEM
  	printf("PlantMgr::init()\n");
#endif
	PlacementMgr::init();
	//Plant::reset();
	ncalls=0;
	nhits=0;
	cnt=0;
	ss();
  	reset();
  	shadow_count=0;
	if(!finisher_added)
		add_finisher(show_plant_info);
	finisher_added=true;

}

void PlantMgr::eval(){	
	PlacementMgr::eval(); 
	if(!first() || !scnt)
	    return;
	for(int i=0;i<scnt;i++){
	    slist.base[i]=sdata+i;
	}
	slist.size=scnt;
	slist.sort();
	
	for(int i=0;i<scnt;i++){
	   double f=slist.base[i]->f;
	   cval=f;
	}
}

void PlantMgr::reset(){
	PlacementMgr::reset();
	//Plant::reset();
	tests=pts_fails=dns_fails=0;
	cval=0;
	scnt=0;
	//cout<<"PlantMgr::reset()"<<endl;
}
//-------------------------------------------------------------
// PlantPoint::set_terrain()	impact terrain
//-------------------------------------------------------------
bool PlantMgr::valid()
{ 
    tests++;
   
#ifdef TEST_PTS
	double mps=min_render_pts;
	if(TheScene->adapt_mode())
		mps=min_adapt_pts;
	Point pv=MapPt;
	double d=pv.length();
	
	double r=TheMap->radius*size;
	double f=TheScene->wscale*r/d;
    double pts=f;
    if(pts<mps){
    	pts_fails++;
    	return false;
    }
#endif  
    // TODO set density biases here ?

    if(density<=0){
    	dns_fails++;
    	return false;
    }
	return true;
}

bool PlantMgr::setProgram(){
	//cout<<"PlantMgr::setProgram"<<endl;
	extern int test7;
	if(shadow_mode)
		return false;
//	if(test7)
//		glCullFace(GL_BACK);
//	else
//	glCullFace(GL_FRONT);
	shadow_count=0;
	GLSLMgr::input_type=GL_LINES;
	GLSLMgr::output_type=GL_TRIANGLE_STRIP;
	TerrainProperties *tp=Td.tp;
	char defs[1024]="";

	PlantMgr::textures=0;
	
	for(int i=0;i<tp->plants.size;i++){
		tp->plants[i]->setProgram();
	}

	switch(TheScene->quality){
	case DRAFT:
		min_draw_width=1;
		break;
	case NORMAL:
		min_draw_width=0.65;
		break;
	case HIGH:
		min_draw_width=0.5;
		break;
	case BEST:
		min_draw_width=0.25;
		break;	
	}

	branch_nodes=0;
	trunk_nodes=0;
	line_nodes=0;
	
	double twilite_min=-0.2; // full night
	double twilite_max=0.2;  // full day
	
	if(test7)
		sprintf(defs,"#define TEST3D\n");
	if(Render.textures()){
		sprintf(defs+strlen(defs),"#define NTEXS %d\n",PlantMgr::textures);
		if(PlantMgr::textures>0 && Render.bumps())
			sprintf(defs+strlen(defs),"#define BUMPS\n",PlantMgr::textures);
	}
	else
		sprintf(defs+strlen(defs),"#define NTEXS 0\n");
		
	sprintf(defs+strlen(defs),"#define NLIGHTS %d\n",Lights.size);
	if(Render.haze())
		sprintf(defs+strlen(defs),"#define HAZE\n");

    bool do_shadows=Raster.shadows();
	if(do_shadows && !TheScene->light_view()&& !TheScene->test_view())
		sprintf(defs+strlen(defs),"#define SHADOWS\n");
	if(TheScene->light_view() || TheScene->test_view())
		sprintf(defs+strlen(defs),"#define TEST_VIEW\n");
	GLSLMgr::setDefString(defs);

	
	if(threed)
		GLSLMgr::loadProgram("plants.gs.vert","plants.frag","plants3D.geom");
	else
		GLSLMgr::loadProgram("plants.gs.vert","plants.frag","plants2D.geom");
		
	GLhandleARB program=GLSLMgr::programHandle();
	if(!program){
		cout<<"PlantMgr::setProgram - failed to load program"<<endl;
		return false;
	}
	
	char str[MAXSTR];

	for(int i=0;i<PlantMgr::textures;i++){
		sprintf(str,"samplers2d[%d]",i);
		glUniform1iARB(glGetUniformLocationARB(program,str),i);
	}

	GLSLVarMgr vars;
	
	Planetoid *orb=(Planetoid*)TheScene->viewobj;
	
	Color diffuse=orb->diffuse;
	Color ambient=orb->ambient;
	Color shadow=orb->shadow_color;
	Color haze=Raster.haze_color;
		
	double shadow_intensity=orb->shadow_intensity;

	
	vars.newFloatVec("Diffuse",diffuse.red(),diffuse.green(),diffuse.blue(),diffuse.alpha());
	vars.newFloatVec("Ambient",ambient.red(),ambient.green(),ambient.blue(),ambient.alpha());
	vars.newFloatVec("Shadow",shadow.red(),shadow.green(),shadow.blue(),shadow_intensity);
	vars.newFloatVec("Haze",haze.red(),haze.green(),haze.blue(),haze.alpha());
	vars.newFloatVar("haze_zfar",Raster.haze_zfar);
	vars.newFloatVar("haze_grad",Raster.haze_grad);
	vars.newFloatVar("haze_ampl",Raster.haze_hf);
	vars.newFloatVar("bump_delta",1e-3);
	vars.newFloatVar("bump_ampl",0.025);
	vars.newFloatVar("twilite_min",twilite_min);
	vars.newFloatVar("twilite_max",twilite_max);

	vars.newBoolVar("lighting",Render.lighting());
	
	double zn=TheScene->znear;
	double zf=TheScene->zfar;
	double ws1=1/zn;
	double ws2=(zn-zf)/zf/zn;

	vars.newFloatVar("ws1",ws1);
	vars.newFloatVar("ws2",ws2);

	vars.setProgram(program);
	
	vars.loadVars();

	GLSLMgr::setProgram();
	GLSLMgr::loadVars();
		
	int n=Plant::plants.size;
	int l=randval;

	//render();

	randval=l;
	return true;
}

void PlantMgr::clearStats(){
	TerrainProperties *tp=Td.tp;
	for(int i=0;i<tp->plants.size;i++){
		tp->plants[i]->clearStats();
	}
}
void PlantMgr::showStats(){
	TerrainProperties *tp=Td.tp;
	for(int i=0;i<tp->plants.size;i++){
		tp->plants[i]->showStats();
	}
}
void PlantMgr::collectStats(){
	TerrainProperties *tp=Td.tp;
	int n=Plant::plants.size;
	for(int i=0;i<PLANT_STATS;i++){
		stats[i]=0;
	}
	stats[0]=tp->plants.size;
	stats[6]=n;
	for(int i=0;i<tp->plants.size;i++){
		TNplant *plant=tp->plants[i]->expr;
		for(int j=0;j<plant->branches;j++){
			stats[1]+=plant->stats[j][2]; // lines
			stats[3]+=plant->stats[j][2]; // lines
			stats[1]+=plant->stats[j][3]; // polygons
			stats[4]+=plant->stats[j][3]; // lines
			stats[1]+=plant->stats[j][4]; // splines
			stats[5]+=plant->stats[j][4]; // lines
			stats[2]+=plant->stats[j][5]; // leaves
		}
	}

}

void PlantMgr::render_shadows(){
	if(!threed)
		return;
	shadow_mode=true;
	GLSLMgr::input_type=GL_LINES;
	GLSLMgr::output_type=GL_TRIANGLE_STRIP;
	//min_draw_width=2;
	
	Raster.setProgram(Raster.PLANT_SHADOWS);
	//glLineWidth(2);
	//glPolygonOffset (0.0f, 0.0f);
	
	shadow_count++;
	render();
	//glLineWidth(1);
	shadow_mode=false;

}
void PlantMgr::render_zvals(){
	if(!threed)
		return;
	shadow_mode=true;
	GLSLMgr::input_type=GL_LINES;
	GLSLMgr::output_type=GL_TRIANGLE_STRIP;

	Raster.setProgram(Raster.PLANT_ZVALS);

	shadow_count++;
	render();

	shadow_mode=false;
}
void PlantMgr::render(){
	oldmode=0;
	int l=randval;
	nocache=TheScene->automv()||PlantMgr::no_cache;
	update_needed=(TheScene->changed_detail()||TheScene->moved()|| nocache);
	//TNBranch::setCollectLeafs(!test5);
	TNBranch::setCollectLeafs(true);
	TNBranch::setCollectBranches(!nocache);
	
	glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);

	double t0=clock();
	double t1;
	double t2;
	double t3;
	if(!nocache && Raster.shadows()&&shadow_count>1)
		update_needed=false;

	if(update_needed){
		//cout<<"update needed"<<endl;
		TNLeaf::freeLeafs();
		TNBranch::freeBranches();
		clearStats();
		TNLeaf::sorted=false;
	}
	t1=clock();
	int n=Plant::plants.size;
	
	if(!shadow_mode)
		glEnable(GL_BLEND);
	if(update_needed)
	for(int i=n-1;i>=0;i--){ // Farthest to closest
		PlantData *s=Plant::plants[i];
		Range=(s->distance-PlantMgr::pmin)/(PlantMgr::pmax-PlantMgr::pmin);//
		Range=sqrt(Range);
		//Range=(s->distance)/(PlantMgr::pmax);//
		//cout<<s->distance/PlantMgr::pmax<<" "<<Range<<endl;
		int id=s->get_id();
		
		TNplant *plant=s->mgr->plant;

		plant->size=s->radius; // placement size
		plant->base_point=s->base*(1-plant->size*plant->base_drop);
		plant->pntsize=s->pntsize;
		plant->distance=s->distance;
		
		Point pp=Point(s->point.x,s->point.y,s->point.x);
		
		double r=Random(pp);
		randval=256*fabs(r)+id;
		plant->seed=URAND;
		plant->instance=i;
		plant->emit();
	}
	t2=clock(); // total
	
	if(TNBranch::isCollectLeafsSet()||TNBranch::isCollectBranchesSet()){
		if(!shadow_mode)
			setProgram();
		glDisable(GL_CULL_FACE);

		if(TNBranch::isCollectBranchesSet()){
			TNBranch::renderBranches();
		}
		if(TNBranch::isCollectLeafsSet()){
			if(!TNLeaf::sorted){
				TNLeaf::sortLeafs();
				TNLeaf::sorted=true;
			}
			TNLeaf::renderLeafs();
		}
		glEnable(GL_CULL_FACE);
	}
	t3=clock(); // total
	randval=l;
	//if(Render.display(PLANTINFO))
		collectStats();
		
#ifdef SHOW_BRANCH_STATS
    if(update_needed)
		showStats();
#endif
    static double dt1,dt2,dt3,dt4;
    
    bool init_acum=(shadow_count==1&&(Raster.shadows()))||(!Raster.shadows());
    bool show_acum=(shadow_count==2*Raster.shadow_vsteps)||(!Raster.shadows());
	if(init_acum){
		dt1=dt2=dt3=dt4=0;
	}
	double ftm=1000*(t1-t0)/CLOCKS_PER_SEC;
	double ctm=1000*(t2-t1)/CLOCKS_PER_SEC;
	double rtm=1000*(t3-t2)/CLOCKS_PER_SEC;
	double ttm=1000*(t3-t0)/CLOCKS_PER_SEC;
	
	dt1+=ftm;
	dt2+=ctm;
	dt3+=rtm;
	dt4+=ttm;		
	render_time=dt4;
#ifdef SHOW_BRANCH_TIMING	
	if(show_acum){
		cout<<shadow_count<<" time free:"<<dt1<<" collect:"<<dt2<<" render:"<<dt3<<" total:"<<dt4<<" ms"<<endl;
	}
#endif
	glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
	update_needed=false;
}
//-------------------------------------------------------------
// PlantMgr::make() factory method to make Placement
//-------------------------------------------------------------
Placement *PlantMgr::make(Point4DL &p, int n)
{
    return new PlantPoint(*this,p,n);
}

//************************************************************
// class PlantPoint
//************************************************************
PlantPoint::PlantPoint(PlantMgr&m, Point4DL&p,int n) : Placement(m,p,n)
{
	ht=0;
	aveht=0;
	wtsum=0;
	dist=1e16;
	visits=0;
	place_hits=0;
	mind=1e16;
	mgr=&m;
	
	instance=m.instance;

	flags.s.active=false;
}

//-------------------------------------------------------------
// PlantPoint::set_terrain()	impact terrain
//-------------------------------------------------------------
bool PlantPoint::set_terrain(PlacementMgr &pmgr)
{
	double d=pmgr.mpt.distance(center);
	d=d/radius;
	PlantMgr &mgr=(PlantMgr&)pmgr;
	sval=0;
	visits++;
	
	if(d>threshold)
		return false;
	if(!flags.s.valid)
		return false;

    flags.s.active=true;
	sval=lerp(d,0,threshold,0,1);

    double wt=1/(0.01+sval);
    aveht+=Height*wt;
	
    wtsum+=wt;

	if(d<dist){
		ht=Height;
		dist=d;
		mind=d;
		place_hits++;
	}
	hits++;

 	sdata[scnt].v=hid;
   	sdata[scnt].f=sval;
  	if(scnt<SDATA_SIZE)
  	    scnt++;
	return true;
}

void PlantPoint::reset(){
	flags.s.active=0;
	visits=0;
	place_hits=0;
	dist=1e6;
	aveht=0;
	wtsum=0;
}
void PlantPoint::dump(){
	if(flags.s.valid && flags.s.active){
		Point4D p(point);
		p=center;
		char msg[256];
		char vh[32];
		sprintf(vh,"%d:%d",visits,place_hits);
		sprintf(msg,"%-3d %-2d %-8s dist:%-0.4f ht:%-1.6f x:%-1.5f y:%-1.5f z:%1.5f",cnt++,flags.l,vh,dist,ht,p.x,p.y,p.z);
		cout<<msg<<endl;
	}
}
//==================== PlantData ===============================
PlantData::PlantData(PlantPoint *pnt,Point bp,double d, double ps){
	type=pnt->type;
	ht=pnt->ht;
	
	point=pnt->point;
	
	aveht=pnt->aveht/pnt->wtsum;
	base=bp;
	
	radius=pnt->radius;
    pntsize=ps;
 	distance=d;//TheScene->vpoint.distance(t);
	visits=pnt->visits;
	instance=pnt->instance;
	mgr=pnt->mgr;
}

void PlantData::print(){
	char msg[256];
	Point pp=Point(point.x,point.y,point.z);
	double h=TheMap->radius*TheMap->hscale;
	sprintf(msg,"visits:%-1d ht:%-1.4f aveht:%-1.4f dist:%g",visits,h*ht/FEET,h*aveht/FEET,distance/FEET);
	cout<<msg<<endl;
	
}
//===================== Plant ==============================
ValueList<PlantData*> Plant::plants;
//-------------------------------------------------------------
// Plant::Plant() Constructor
//-------------------------------------------------------------
Plant::Plant(int l, TNode *e)
{
	type=l;
	plant_id=get_id();
	expr=e;
	valid=false;
}

void Plant::reset()
{
	plants.free();
	PlantMgr::textures=0;

	TerrainProperties *tp=Td.tp;
	for(int i=0;i<tp->plants.size;i++){
		Plant *plant=tp->plants[i];
		plant->mgr()->free_htable();
	}
}

//-------------------------------------------------------------
// Plant::collect() collect valid plant points
//-------------------------------------------------------------
void Plant::collect()
{
	
#ifdef DEBUG_TEST_PTS
	if(tests>0)
		cout<<"tests:"<<tests<<" fails  pts:"<<100.0*pts_fails/tests<<" %"<<" dns:"<<100.0*dns_fails/tests<<endl;
#endif
	int new_plants=0;
	int bad_pts=0;
#ifdef SHOW_PLANT_STATS	
	int trys=0;
	int visits=0;
	int bad_visits=0;
	int bad_valid=0;
	int bad_active=0;
#endif	

	TerrainProperties *tp=Td.tp;
	for(int i=0;i<tp->plants.size;i++){
#ifdef SHOW_PLANT_STATS	
		trys=visits=bad_visits=bad_valid=bad_active=bad_pts=new_plants=0;
#endif
		Plant *plant=tp->plants[i];
		plant->mgr()->ss();
		PlantPoint *s=(PlantPoint*)plant->mgr()->next();
	while(s){
#ifdef SHOW_PLANT_STATS
		trys++;		
		if(s->visits<MIN_VISITS)
			bad_visits++;
		if(!s->flags.s.valid)
			bad_valid++;
		if(!s->flags.s.active)
			bad_active++;
#endif	
		if(s->visits>=1 && s->flags.s.valid && s->flags.s.active){
			Point4D	p(s->center);
			Point pp=Point(p.x,p.y,p.z);
			Point ps=pp.spherical();
#ifdef USE_AVEHT
			double ht=s->aveht/s->wtsum;
#else
			double ht=s->ht;
#endif			
			Point base=TheMap->point(ps.y, ps.x,ht); // spherical-to-rectangular
			Point bp=Point(-base.x,base.y,-base.z);  // Point.rectangular has 180 rotation around y
			double d=bp.distance(TheScene->vpoint);  // distance	
			double r=PSCALE*s->radius;
			//double r=1e-3*s->radius;
			double f=TheScene->wscale*r/d;
			//cout<<PSCALE<<endl;
			//cout<<r<<" "<<f<<" "<<r/f<<endl;
		    double pts=f;
		    double minv=MIN_VISITS; 
		    bool pts_test=true;
#ifdef TEST_PTS
		    minv=lerp(pts,min_render_pts,10*min_render_pts,1,2*MIN_VISITS); 
		    if(pts<min_render_pts){
		    	pts_test=false;
		    	bad_pts++;
		    }
#endif
		    if(pts_test && s->visits>=minv){
		    	new_plants++;
		    	plants.add(new PlantData((PlantPoint*)s,bp,d,pts));
		    }
		}
		s=plant->mgr()->next();
	  }	
#ifdef SHOW_PLANT_STATS
	double usage=100.0*trys/plant->mgr()->hashsize;
	double badvis=100.0*bad_visits/trys;
	double badactive=100.0*bad_active/trys;
	double badpts=100.0*bad_pts/trys;
	cout<<plant->name()<<" plants "<<new_plants<<" tests:"<<trys<<" %hash:"<<usage<<" %inactive:"<<badactive<<" %small:"<<badpts<<" %visited:"<<100-badvis<<endl;
#endif

	}
	if(plants.size){
		plants.sort();
		PlantMgr::pmin=plants[0]->value();
		PlantMgr::pmax=plants[plants.size-1]->value();
 		double range=PlantMgr::pmax-PlantMgr::pmin;
   		//cout<<"plants collected:"<<plants.size<<" range:"<<range<<endl;
	}
#ifdef SHOW
	//int pnrt_num=plants.size-1;
	int pnrt_num=min(2,plants.size-1);

	for(int i=pnrt_num;i>=0;i--){
		cout<<i<<" ";
		plants[i]->print();	
	}
#endif
	glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
	
}
//-------------------------------------------------------------
// Plant::eval() evaluate TNtexture string
//-------------------------------------------------------------
void Plant::eval()
{
	int mode=CurrentScope->passmode();
	CurrentScope->set_spass();
	expr->eval(); // TNplant.eval()
	CurrentScope->set_passmode(mode);
}

bool Plant::setProgram(){
	return expr->setProgram();
}
bool Plant::initProgram(){
	return false;
}
void Plant::clearStats(){
	expr->clearStats();
}
void Plant::showStats(){
	expr->showStats();
}

//===================== TNplant ==============================

double TNplant::norm_max=2;
double TNplant::norm_min=1e-5;

//************************************************************
// TNplant class
//************************************************************
TNplant::TNplant(TNode *l, TNode *r) : TNplacements(0,l,r,0)
{
	set_collapsed();

	TNarg *arg=left;
	TNarg *node=arg->left;
	if(node->typeValue() == ID_STRING){		
		setName(((TNstring*)node)->value);
		left=arg->next();
		left->setParent(this);
		arg->right=0;
		delete arg;	
	}
	plant=0;
	branches=0;
	pntsize=0;
	maxdensity=0.1;
	radius=0;
	size=1e-6;
	plant_id=0;
	base_drop=0;
	width_scale=1;
	size_scale=1;
	rendered=0;
	distance=0;
	instance=0;
	seed=0;
	
    mgr=new PlantMgr(PLANTS|NOLOD,this);
}

//-------------------------------------------------------------
// TNplant::~TNplant() destructor
//-------------------------------------------------------------
TNplant::~TNplant()
{
	//cout<<"TNplant::~TNplant()"<<endl;
	DFREE(plant);
}

//-------------------------------------------------------------
// TNplant::applyExpr() apply expr value
//-------------------------------------------------------------
void TNplant::applyExpr()
{
   if(expr){
	    TNplant* sprt=(TNplant*)expr;
	    mgr->type=type;
		DFREE(left);
		left=expr->left;
		left->setParent(this);
		expr=0;
	}
	if(right)
		right->applyExpr();
 }
//-------------------------------------------------------------
// TNplant::init() initialize the node
//-------------------------------------------------------------
void TNplant::init()
{
    branches=0;
	if(right)
	   right->init();
	PlantMgr *smgr=(PlantMgr*)mgr;
	if(plant==0)
		plant=new Plant(type,this);
	smgr->init();
	
    double arg[11];
	INIT;
	TNarg &args=*((TNarg *)left);
	int n=getargs(&args,arg,11);
	
	if(n>0) mgr->levels=(int)arg[0]; 	// scale levels
	if(n>1) mgr->maxsize=arg[1];     	// size of largest 
	if(n>2) mgr->mult=arg[2];			// random scale multiplier
	if(n>3) mgr->level_mult=arg[3];     // scale multiplier per level
	if(n>4) maxdensity=arg[4];
	if(n>5) smgr->slope_bias=arg[5];
	if(n>6) smgr->ht_bias=arg[6];
	if(n>7) smgr->lat_bias=arg[7];
	if(n>8) base_drop=arg[8];

	smgr->set_first(1);
}

void TNplant::set_id(int i){
	BIT_OFF(type,PID);
	type|=i&PID;
}
//-------------------------------------------------------------
// TNplant::eval() evaluate the node
//-------------------------------------------------------------
void TNplant::eval()
{	
	SINIT;
	if(right)
		right->eval();
	if(!isEnabled()){
		return;
	}
	if(Td.tp->id==WATER)
		return;
	if(CurrentScope->rpass()){
		int size=Td.tp->plants.size;
		plant_id=size;	
		mgr->instance=plant_id;
		if(plant)
			plant->set_id(size);		
		Td.add_plant(plant);
		return;
	}	
	if(!CurrentScope->spass()){
		return;
	}
	Color c =Color(1,1,1);
	PlantMgr *smgr=(PlantMgr*)mgr;

	//cout<<Height<<endl;
	
	htval=Height;
	ncalls++;
	
	INIT;
	
	double density=maxdensity;
	MaxSize=mgr->maxsize;
	radius=PSCALE;
	TerrainProperties *tp=TerrainData::tp;
		
	mgr->type=type;
	if(smgr->slope_bias){
		double slope=8*zslope();
		double f=2*lerp(fabs(smgr->slope_bias)*slope,0,1,-smgr->slope_bias,smgr->slope_bias);
#ifdef DEBUG_SLOPE_BIAS
		if(ncalls%100==0)
			cout<<"slope:"<<slope<<" f:"<<f<<endl;
#endif
		density+=f;
	}
	if(smgr->ht_bias){
		double f=2*lerp(8*fabs(smgr->ht_bias)*Height,-1,1,-smgr->ht_bias,smgr->ht_bias);
		density+=f;
	}
	if(smgr->lat_bias){
		//double f=lerp(Temp,0,10,-smgr->lat_bias,smgr->lat_bias);
		double f=lerp(fabs(smgr->lat_bias)*fabs(2*Phi/180),0,1,-smgr->lat_bias,+smgr->lat_bias);
		density+=f;
	}
    density*=maxdensity;
	density=clamp(density,0,1);
	density=sqrt(density);

	mgr->density=density;
	double hashcode=(mgr->levels+
		            1/mgr->maxsize
					+11*tp->id
					+7*plant_id
					);
	mgr->id=(int)hashcode+mgr->type+PLANTS+hashcode*TheNoise.rseed;
	
	sval=0;
	hits=0;
	cval=0;
	scnt=0;

	smgr->eval();  // calls PlantPoint.set_terrain
   
	if(hits>0) { // inside target radius
		nhits++;
		double x=1-cval;
		if(PlantMgr::testColor()) {
			c=Color(0,x,1);
			Td.diffuse=Td.diffuse.mix(c,0.5);
		}
		if(PlantMgr::testDensity()) {
			x=1/(cval+1e-6);
			x=x*x; //*x*x;
			Td.density+=lerp(cval,0,0.2,0,0.05*x);
		}
	}
 }

void TNplant::clearStats(){
	//if(!update_needed)
	//	return;
	for(int i=0;i<MAX_BRANCHES;i++){
		for(int j=0;j<MAX_PLANT_DATA;j++)
			stats[i][j]=0;
	}
}
void TNplant::showStats(){
	for(int i=0;i<branches;i++){
		cout<<"plant["<<name_str<<"] branch["<<i<<"]"
		<<" skipped:"<<stats[i][0]
		<<" terminal:"<<stats[i][1]
	    <<" lines:"<<stats[i][2]
		<<" polygons:"<<stats[i][3]
		<<" splines:"<<stats[i][4]
		<<" leafs:"<<stats[i][5]
		<<endl;
	}
}
void TNplant::addSkipped(int id){
	if(update_needed)
	stats[id][0]++;	
}
void TNplant::addTerminal(int id){
	if(update_needed)
	stats[id][1]++;	
}
void TNplant::addLine(int id){
	if(update_needed)
	stats[id][2]++;	
}
void TNplant::addBranch(int id){
	if(update_needed)
	stats[id][3]++;	
}
void TNplant::addSpline(int id){
	if(update_needed)
	stats[id][4]++;	
}
void TNplant::addLeaf(int id){
	if(update_needed)
	stats[id][5]++;	
}

//-------------------------------------------------------------
// TNtexture::valueString() node value substring
//-------------------------------------------------------------
void TNplant::valueString(char *s)
{
	if(strlen(name_str)>0)
		sprintf(s+strlen(s),"%s(\"%s\",",symbol(),name_str);
	else
		sprintf(s+strlen(s),"%s(",symbol());

	TNarg *arg=(TNarg*)left;
	while(arg){
		arg->valueString(s+strlen(s));
		arg=arg->next();
		if(arg)
			strcat(s,",");
	}
	strcat(s,")");
}

//-------------------------------------------------------------
// TNplant::save() archive the node
//-------------------------------------------------------------
void TNplant::save(FILE *f)
{
	char buff[1024];
	buff[0]=0;
	valueString(buff);
	//if(addtabs)
	    fprintf(f,"\n%s",tabs);
	fprintf(f,"%s",buff);
	if(right)
		right->save(f);
}

//-------------------------------------------------------------
// TNplant::saveNode() archive the node
//-------------------------------------------------------------
void TNplant::saveNode(FILE *f)
{
	char buff[1024];
	buff[0]=0;
	valueString(buff);
	//if(addtabs)
	    fprintf(f,"\n%s",tabs);
	fprintf(f,"%s",buff);
	//TNbase::saveNode(f);
	TNBranch *branch=right;
	while(branch && (branch->typeValue()==ID_BRANCH||branch->typeValue()==ID_LEAF)){
		branch->saveNode(f);
		branch=branch->right;
	}
}

//-------------------------------------------------------------
// TNplant::lastChild
//-------------------------------------------------------------
NodeIF *TNplant::lastChild(){
	TNBranch *p = (TNBranch*)right;
	if(!right)
		return this;
	TNBranch *n=p;
	while (n && (n->typeValue() == ID_BRANCH || n->typeValue() == ID_LEAF)) {
		TNBranch *t=n->right;
		if(!t || (t->typeValue()!=ID_BRANCH && t->typeValue()!=ID_LEAF)){
			p=n;
			break;
		}
		n=n->right;
	}
	return p;
}

//-------------------------------------------------------------
// TNplant::removeNode() delete or replace
//-------------------------------------------------------------
NodeIF *TNplant::removeNode(){
	NodeIF *p=getParent();
	NodeIF *child=0;
	if(p->typeValue()!=ID_ROOT){
		child=p->removeChild(this);
	}
	TNBranch *branch=(TNBranch*)right;
	if(!branch)
	   return this;

	TNode *next=0;
	while(branch && (branch->typeValue()==ID_BRANCH||branch->typeValue()==ID_LEAF)){
		next=branch->right;
		branch->right=0;
		delete branch;
		branch=next;
	}
	right=0;
	if(next){
		if(p->typeValue()!=ID_ROOT)
	    	p->addChild(next);
		else
			p->replaceChild(this,next);
	}
	TerrainProperties *tp=Td.tp;
	tp->plants.remove(plant);
	plant=0;
	return this;
}


//-------------------------------------------------------------
// TNplant::addChild
//-------------------------------------------------------------
NodeIF *TNplant::addChild(NodeIF *n){
	if(n->typeValue()==ID_BRANCH)
		return TNfunc::addChild(n);
	else {
		TNunary *nlast=lastChild();
		nlast->right=n;
	}
	return this;
}

//-------------------------------------------------------------
// TNplant::replaceNode
//-------------------------------------------------------------
NodeIF *TNplant::replaceNode(NodeIF *n){
	removeNode();
	NodeIF *p=getParent();
    p->addChild(n);
	return this;
}
int TNplant::getChildren(LinkedList<NodeIF*>&l){
	return TNfunc::getChildren(l);
}

//-------------------------------------------------------------
// TNplant::emit() build the branch structure
//-------------------------------------------------------------
void TNplant::emit(){
	if(!isEnabled())
		return;
	// compensate for changes in scene fov and aspect to keep ht/width constant	
	// note: width_scale == 1 for med and large 0.6629 for wide
	//width_scale=0.834729*TheScene->wscale/TheScene->aspect/TheScene->viewport[3];
	width_scale=800/TheScene->wscale;
    rendered=0;
    
	Randval=URAND;
	double length=size*PSCALE;	

	Point bot=base_point;
	norm=bot.normalize();

	glNormal3dv(norm.values());
			
	TNBRANCH *first_branch=(TNBRANCH*)right;
	if(right && right->typeValue() == ID_BRANCH) 
		first_branch=(TNBRANCH*)right;
	else
		return;
	double branch_size=length*first_branch->length;

	Point top=bot*(1+branch_size); // starting trunk size
	Point p1=bot;
	Point p2=top;
	p1=p1-TheScene->vpoint;
	p2=p2-TheScene->vpoint;

	double start_width=width_scale*pntsize*first_branch->length;//*first_branch->width;
	size_scale=	pntsize*width_scale/size;
	
    //cout<<TheScene->aspect<<" "<<width_scale<<" "<<start_width<<" "<<size_scale<<endl;

	Point tip;
	tip.x=start_width/width_scale;
	tip.y=0;
	tip.z=0;
	
	TNLeaf::left_side=0;
	//glDisable(GL_CULL_FACE);
	
	glVertexAttrib4d(GLSLMgr::TexCoordsID, 0, 0, 0,0); // Constants1
	first_branch->fork(BASE_FORK,p1,p2-p1,tip,length,start_width,0);
	//glEnable(GL_CULL_FACE);
	
}

bool TNplant::setProgram(){
	TNBRANCH *first_branch=(TNBRANCH*)right;
	if(right && right->typeValue() == ID_BRANCH) 
		first_branch=(TNBRANCH*)right;
	else
		return false;
	TNBRANCH *branch=first_branch;
	while(branch && (branch->typeValue() == ID_BRANCH || branch->typeValue() == ID_LEAF)){
		branch->setProgram();
		branch=branch->right;
	}
	return true;
}

//===================== TNBranch ==============================
//************************************************************
// TNBranch class
//************************************************************
int TNBranch::collect_mode=0;
ValueList<BranchData*> TNBranch::branches(1000,2000);

TNBranch::TNBranch(TNode *l, TNode *r, TNode *b) : TNbase(0,l,r,b)
{
	setImageMgr(&branch_mgr);
	set_collapsed();
	TNarg *arg=left;
	TNarg *node=arg->left;
	if(node->typeValue() == ID_STRING){		
		setName(((TNstring*)node)->value);
		left=arg->next();
		if(left)
			left->setParent(this);
		arg->right=0;
		delete arg;	
	}
	level=0;
	maxlvl=0;
	branch_id=0;
	length=1;
	width=1;
	width_taper=0.75;
	length_taper=0.95;
	randomness=0.25;
	max_splits=4;
	first_bias=0;
	flatness=0.0;
	curvature=0;
	density=1;
	divergence=0.75;
	min_level=0;
	max_level=1;
	offset=1;
	root=0;
	image=0;
	image_file[0]=0;
	colorexpr[0]=0;
	texture_id=0;
	texid=-1;
	instance=0;
	color_flags=0;
	color=0;
	enables=flags::ENABLES;
	bias=0;
	alpha_texture=false;
	//getTextureName();
	getColorString();
	setEnabled(true);
}

void TNBranch::init(){
	double arg[12];
	if(!left)
		return;
	INIT;
	if(arglist.size==0)
		getArgs();
	getTextureName();
	initArgs();
	
	root=getRoot();
	level=0;
	branch_id=root->branches;
	root->branches+=1;
	setColorFromExpr();
	if(base){
		delete base;
		base=0;
	}
	setColorFlags();
	
	if(right)
		right->init();
}

void TNBranch::initArgs(){
	double arg[16];
	if(!left)
		return;
	INIT;
	enables=flags::ENABLES;
	TNarg &args=*((TNarg *)left);
	int n=getargs(&args,arg,16);
	if(n>0)max_level=arg[0];
	if(n>1)max_splits=arg[1];
	if(n>2)length=arg[2];
	if(n>3)width=arg[3];
	if(n>4)randomness=arg[4];
	if(n>5)divergence=arg[5];
	if(n>6)flatness=arg[6];
	if(n>7)width_taper=arg[7];
	if(n>8)length_taper=arg[8];	
	if(n>9)first_bias=arg[9];
	if(n>10)min_level=arg[10];
	if(n>11)offset=arg[11];
	if(n>12)bias=arg[12];
	if(n>13)enables=arg[13];
	if(n>14)curvature=arg[14];
	if(n>15)density=arg[15];}

void TNBranch::invalidateTexture(){
	if(texture_id){
		glDeleteTextures(1,&texture_id);
		texture_id=0;
	}
}
bool TNBranch::setProgram(){
	
	if(!image || !image->valid()){
		return false;
	}	
	texid=PlantMgr::textures++;
	char str[MAXSTR];
	glActiveTexture(GL_TEXTURE0+texid);
	if(texture_id==0){
		bool rgba_image=(image->gltype()==GL_RGBA)?true:false;
		alpha_texture=image->alpha_image();
		//cout<<"rgba_image="<<rgba_image<<" alpha_image="<<alpha_texture<<endl;

		glGenTextures(1, &texture_id); // Generate a unique texture ID
		glBindTexture(GL_TEXTURE_2D, texture_id);
		glTexEnvf(GL_TEXTURE_FILTER_CONTROL, GL_TEXTURE_LOD_BIAS, -1);
		glTexParameteri(GL_TEXTURE_2D, GL_GENERATE_MIPMAP, GL_TRUE);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR_MIPMAP_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
		int w=image->width;
		int h=image->height;
		unsigned char* pixels=(unsigned char*)image->data;

		if(alpha_texture||rgba_image)
			glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, w, h, 0, GL_RGBA, GL_UNSIGNED_BYTE, pixels);
		else
			glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, w, h, 0, GL_RGB, GL_UNSIGNED_BYTE, pixels);
		
		//cout<<"generating texture id:"<<texture_id<<" texid:"<<texid<<" alpha:"<<alpha_texture<<endl;

	}
	glBindTexture(GL_TEXTURE_2D, texture_id);
		
	return true;	
}

//-------------------------------------------------------------
// TNBranch::setImage(char *name) set image texture
//-------------------------------------------------------------
void TNBranch::setPlantImage(char *name){
	setImage(name);
	if(image)
		invalidateTexture();
}
void TNBranch::setColorFromExpr(){
	if(color){
		delete color;
		color=0;
	}
	if(strlen(colorexpr)){
		color=(TNcolor*)TheScene->parse_node(colorexpr);
	}
}
void TNBranch::setColorExpr(char *expr){
	if(strcmp(expr,colorexpr)){
		strcpy(colorexpr,expr);
		setColorFromExpr();
	}
	
}
void TNBranch::setColor(TNcolor* c){
	if(color)
		delete color;
	color=c;
}
TNcolor* TNBranch::getColor(){
	return color;
}

void TNBranch::getArgs(){
	TNarg *arg=((TNarg *)left);
	arglist.reset();
	while(arg){
		arglist.add(arg);
		arg=arg->next();
	}
	//cout<<arglist.size<<endl;
}
double TNBranch::evalArg(int i, double d){
	TNarg *arg=arglist[i];
	if(arg){
		arg->eval();
		if(!S0.constant())
			return S0.s;
	}
	return d;
}

void TNBranch::getTextureName(){
	if(base){
		TNarg *arg=((TNarg *)base);
		while(arg){
			TNode *node=arg->left;
			if(node->typeValue()==ID_STRING){
				setPlantImage(((TNstring*)node)->value);
				if(image){
					texid=PlantMgr::textures;
					PlantMgr::textures++;
				}
				return;
			}			
			arg=arg->next();
		}
	}
}
void TNBranch::getColorString (){
	if(base){
		TNarg *arg=((TNarg *)base);
		while(arg){
			TNode *node=arg->left;
			if(node->typeValue()==ID_COLOR){
				node->valueString(colorexpr);
				return;
			}			
			arg=arg->next();
		}
	}
}

bool TNBranch::colValid(){
	return strlen(colorexpr)>0?true:false;
}
bool TNBranch::texValid(){
	return texid>0;
}

void TNBranch::setColorFlags(){
	color_flags=0;
	if(color && isColEnabled()){
		color_flags=1;
		int comps=color->comps();
		TNarg &args=*((TNarg *)color->right);
		char alpha[256]={0};
		if(args[3])
			args[3]->valueString(alpha);
		if(comps==4 && strcmp(alpha,"0"))
			color_flags=2;
		else
			color_flags=0;
	}
	if(texid>=0 && isTexEnabled() && alpha_texture && !isShapeEnabled())
		color_flags|=4; // rect mode
}
void TNBranch::setColor(bool set){
	if(PlantMgr::shadow_mode)
		return;
	if(color && isColEnabled()){
		S0.clr_cvalid();
		color->eval();
		if(set)
			glColor4d(S0.c.red(), S0.c.green(), S0.c.blue(), S0.c.alpha());
	}
	else if(set){
		glColor4d(1, 1, 1, 1);
	}
}

Point TNBranch::setVector(Point vec, Point start, int lvl){

	Point v = vec.normalize();
	
	if(isPlantBranch()){
		double d=evalArg(5,divergence);
		v.x += d * SRAND;
		v.y += d * SRAND;
		v.z += d * SRAND;
		v = v.normalize(); // branch direction
	}
	
//	if(isPlantLeaf())
//	return v;
			
	double g=evalArg(6,flatness); // magnitude
	double c=evalArg(14,curvature);
	if(g==0)
		return v;

	c=clamp(c,-1,1);
	Point np,nm,vp,vf,v1,v2;
    Point rn=root->norm;
    double dp=1-v.dot(rn);
    if(dp<1e-3){
    	rn=rn+Point(1e-3,2e-4,1e-3);
    }
	nm=start-rn;
	np=start+rn;
	np=np.normalize();
	nm=nm.normalize();
    
	if(isPlantLeaf())
		vp=v;
	else{
		vp=np.cross(v);
    	vp = vp.cross(np); // flat
 	}
   	vp = vp.normalize(); 
	v1 = v * (1 - g); 
	double f=abs(c);
	if(c>=0)
		v2=np*f+vp*(1-f);
	else
		v2=nm*f+vp*(1-f);
	v = v1 + v2*g;

	return v;

}
Point TNBranch::spline(double x, Point p0, Point p1, Point p2){
  Point c=p0;
  Point b=p1*4-p0*3-p2;
  Point a=p2*2+p0*2-p1*4;
  return a*x*x+b*x+c;
}

static bool main_fork=false;
void TNBranch::fork(int opt, Point start, Point vec,Point tip,double s, double w, int lvl){
	int minlvl=0;
	//TNLeaf::left_side=0;
	TNBranch *parent=getParent();
	if(min_level<-0.1){
		if(parent->typeValue()==ID_BRANCH)
			minlvl=parent->max_level+min_level;
	}
	else if(min_level>0)
		minlvl=min_level;
	//if(!isPlantLeaf() &&lvl<minlvl)
	if(lvl<minlvl)
		return;
	if(isPlantLeaf())
		maxlvl=parent->max_level;
	else
		maxlvl=max_level;


	level=0;
    int l=randval;
    
	double n=1;

	if(isPlantBranch()){
		n = first_bias*lerp(density,0.0,1.0,2*SRAND+0.25,1.0);
		n=n<1?1:n;
		double we=evalArg(3,width);
				
		if((opt & BASE_FORK)==0)
			we+=Range;
		for(int i=0;i<n;i++){
			level=0;
			emit(opt,start,vec,tip,s,w*we,1);
		}
	}
	else{
		TNLeaf *leaf=this;
		leaf->phase=root->seed; // random phase
		n+=max_splits;
		for(int i=0;i<n;i++){
			emit(opt,start,vec,tip,s,w,lvl);
		}
	}
	randval=l+1;
}


void TNBranch::emit(int opt, Point base, Point vec, Point tip,
		double parent_size, double parent_width, int lvl) {

	int lev = lvl;
	lev++;

	if (!root)
		init();
	level++;

	int mode = opt;

	bool first_fork = (opt & FIRST_FORK);
	bool main_branch = (opt & FIRST_EMIT);

	double topx = 0;
	double topy = 0;
	double botx = 1;
	double boty = 1;
	Point v, p0, p1, p2, bot, q;
	double a, b, x, y, off;
	int shader_mode = 0;
	int poly_mode = POLY_FILL;//GL_FILL;
	if (PlantMgr::poly_lines || PlantMgr::shader_lines)
		poly_mode = POLY_LINE;

	TNBranch *parent=getParent();
	TNBranch *child = 0;
	if(right && (right->typeValue()==ID_BRANCH || right->typeValue()==ID_LEAF))
		child=(TNBranch *)right;
	Color c;
	double size_scale = 1.0;
	double child_width = parent_width;
	double child_size = parent_size;
	double top_offset = 0;
	double bot_offset = 0;
	double parent_length = parent_size * TheScene->wscale * root->width_scale
			/ root->size;
	double child_length = parent_length;
	double pw=1;
	double pd=1;

	if(isPlantBranch()){
		int n = (int)max_splits+0.4;
		pw=pow(n,max_level);
		pw=pw<max_level?max_level:pw;
		//pd = ((double) level) / pw;

		if (first_fork && lvl > 0  && parent->typeValue()==ID_BRANCH){
			child_width *= parent->width_taper;
	    }
		if (child_width < MIN_DRAW_WIDTH) {
			root->addSkipped(branch_id);
			return;
		}
		if (level>pw) {
			root->addSkipped(branch_id);
			return;
		}
	}
	Level = ((double) lvl-1) / maxlvl;
	
	Srand = SRAND;
	Point start = base;
	
	p0 = base - vec; // previous base
	p1 = base;     // new base

	child_size *= 1 + 0.25 * randomness * SRAND;
	double cl = child_size * evalArg(2,length);
	if (!main_branch) {
		if (isPlantLeaf()) {
			b=offset*(1.0-(double)level/(max_splits + 1));
			//b = lerp(first_bias,0,1,0,Level);//(lvl-1.0) / (first_bias + 1);
			//b=1-Level;
			//cout<<first_bias<<" "<<lvl<<" "<<maxlvl<<" "<<level<<" "<<b<<endl;
		} else {
			b = offset*URAND;
		}
		b = b <= 1 ? b : 1;

		start = p1 - vec * b;
		SRAND;
		double dw = (parent_width - child_width) / parent_width;
		bot_offset = dw * SRAND / size_scale;
		top_offset = bot_offset;

		v = setVector(vec, start, lvl);
		v = v * cl; // v = direction along last branch
	} else { // main branch
		bot_offset = tip.z;
		v = setVector(vec, start, lvl);
		v = v * cl; // v = direction along last branch
	}
	//set leaf offset from previous leaf (e.g. so flowers don't intersect leaves)
	if (isPlantLeaf()&& child && child->isPlantLeaf())
	  	//v=v*child->length_taper; // why does reducing v only affect child leaf offset?
  		v=v*0.1; // why does reducing v only affect child leaf offset?
	p2 = start + v; // new top
	bot = p2;       // new base	
	p1 = start;

	int tid = isTexEnabled() ? texid : -1;
	if (child_width > MIN_LINE_WIDTH) {
		if (isPlantBranch() && lev >maxlvl)
			opt = LAST_EMIT;
		double bf=evalArg(12,Randval*randomness+bias);
		int rc=image_cols*image_rows-1;
		int sel=0;
		if(rc>0){
			sel=bf*rc;
			sel=clamp(sel,0,rc);
		}
		int sy=sel/image_cols;
		int sx=sel-sy*image_rows;
		
		sy=image_rows-sy-1; // invert y
		Point4D sd(image_cols,image_rows,sx,sy);

		if (isPlantLeaf() && isEnabled()) {  // leaf mode
			if (PlantMgr::shadow_mode && !isShadowEnabled())
				randval += 2;
			else if(update_needed){
				double rv = URAND; // density
				double sv = SRAND; // size
				double df = evalArg(15,density);
				if (rv > 1 - df) { // skip render if density test fails
					shader_mode = LEAF_MODE;
					if (PlantMgr::shader_lines)
						shader_mode = LINE_MODE;
	
					setColor(nocache);
					c = S0.c;

					double depth = bot.length();
					child_size = length * FEET / 12; // inches
					child_size *= 1 + 0.5 * randomness * sv;

					double width_ratio = 0.5 * width;
					if(image)
						width_ratio/=image->aspect();
					double size = root->width_scale * PSCALE * TheScene->wscale
							* child_size;

					root->rendered++;

					int segs = max_level;
					double tilt = divergence+ 1e-4; // meta-stable if tilt=0;
					double f = 1.0 / segs;
 					Point eye = p1.normalize(); // base of branch
					eye = eye.normalize();
					Point v = p2 - p1;  // branch direction
					v = v.normalize();
					Point t = v.cross(eye); // vector in a plane perpendicular to branch and eye (but edge on)
					t = t.cross(v);        // offset 90 degrees from view plane 
					t = t.normalize();
					Point r = t * tilt + v * (1 - tilt);
					r = r.normalize();
					Point pv = p2;

					 // alternate leaf side on branch
					TNLeaf *leaf = this;
					double phase = leaf->phase;
					double nscale=-1;
					if ((leaf->left_side & 1) == 0){
						phase += 0.5;
					}
					leaf->left_side++;
					
					double orientation=flatness+1e-3;
					pd=pow(Level,4);
					double bt=lerp(pd,0,1,1,1-length_taper);
					bt=bt<0?0:bt;
					
					//cout<<bt<<endl;

					double asize=size * bt;
					double w1 = 0.75*parent_width / TheScene->wscale/ root->size_scale;
					// leaf clusters
					Point p1s=p1;
					for (int i = 0; i < segs; i++) {
						root->addLeaf(branch_id);
						double a = i * f + phase;
						double ca = cos(2.0 * PI * a);
						double sa = sin(2.0 * PI * a);
						Point pr = r * ca + v.cross(r) * sa
								+ v * v.dot(r) * (1.0 - ca);
						pr = pr.normalize();
						p1 = p1s+ pr * w1; // need 1/2 branch width !
						p2 = p1 + pr * asize;
						
						double aspect=((double)image_cols)/image_rows;
						int psmode=poly_mode|shader_mode;
						if(isCollectLeafsSet())
							TNLeaf::collectLeafs(Point4D(p0), Point4D(p1), Point4D(p2),
									Point4D(1 - width_taper,width_ratio * asize/aspect, orientation,enables),
									Point4D(nscale,color_flags, tid, psmode), sd,c);
						else {
							glColor4d(S0.c.red(), S0.c.green(), S0.c.blue(), S0.c.alpha());

							glVertexAttrib4d(GLSLMgr::CommonID3, sd.x, sd.y,sd.z, sd.w); // Constants3
							glVertexAttrib4d(GLSLMgr::CommonID2, p0.x, p0.y,p0.z, 0); // Constants2
							glVertexAttrib4d(GLSLMgr::CommonID1,1 - width_taper, width_ratio * asize/aspect, orientation, enables); // Constants1		
							glVertexAttrib4d(GLSLMgr::TexCoordsID, nscale,color_flags, tid, shaderMode(psmode)); 
							
							glPolygonMode(GL_FRONT_AND_BACK, polyMode(psmode));
							glBegin(GL_LINES);
							glVertex4d(p1.x, p1.y, p1.z, 0);
							glVertex4d(p2.x, p2.y, p2.z, 0);
							glEnd();
						}
					}
				}
				else
					root->addSkipped(branch_id);

			}
		} else if (child_width > MIN_TRIANGLE_WIDTH && isEnabled()) { // branch mode
			double nscale = lerp(child_width, MIN_LINE_WIDTH,
					10 * MIN_TRIANGLE_WIDTH, TNplant::norm_min,
					TNplant::norm_max);

			double w1 = child_width / TheScene->wscale;
			double w2 = w1 * (evalArg(7,width_taper));

			shader_mode = RECT_MODE;
			if (PlantMgr::spline && child_width > MIN_SPLINE_WIDTH) {
				shader_mode = SPLINE_MODE;
				root->addSpline(branch_id);
			} else
				root->addBranch(branch_id);
			if (PlantMgr::shader_lines)
				shader_mode = LINE_MODE;

			setColor(nocache);
			c = S0.c;

			tip.x = topx;
			tip.y = topy;
			tip.z = top_offset;
			root->rendered++;

			if (PlantMgr::threed) {
				w1 = w1 / root->size_scale;
				w2 = w2 / root->size_scale;
			}
            double phase=0.5*Randval;

			int psmode=poly_mode|shader_mode;
			if(!isCollectBranchesSet()){
				glVertexAttrib4d(GLSLMgr::TexCoordsID, nscale, color_flags, tid, shaderMode(psmode));
				glPolygonMode(GL_FRONT_AND_BACK, polyMode(psmode));
			}

			if (PlantMgr::threed && shader_mode == SPLINE_MODE) {
				// note: first implemented this code in the shader and was a bit faster but:
				// 1) in 3d run out of shader resources (max components) unless the product
				//    of spline nodes and cone nodes is <= 32 (default cone nodes = 16 so nv <=2)
				// 2) get miss-aligment between branch segments because can't set terminal vector (v)
				//    to direction of spline end (no access to ogl parameters from shader)
				int nv = 4;
				double ds = 0.5 / nv;
				double s = 0.5;
				double r1 = w1;
				double r2 = w2;
				Point t0, t1, t2;
				t0 = p0;
				double delta = 1.0 / (nv);
				double f1, f2, dx, dy;
				Point4D T0;
 				for (int i = 0; i < nv; i++) {
					f1 = i * delta;
					f2 = (i + 1) * delta;
					dx = (1 - f1) * r1 + f1 * r2;
					dy = (1 - f2) * r1 + f2 * r2;
					t1 = spline(s, p0, p1, p2);
					t2 = spline(s + ds, p0, p1, p2);
					T0=Point4D(t0.x, t0.y, t0.z,phase);
			
					if(isCollectBranchesSet()){
					    TNBranch::collectBranches(T0, Point4D(t1), Point4D(t2),
						Point4D(dx, dy, f1, f2),
						Point4D(nscale,color_flags, tid, psmode), sd,c);
					}
					else {			
						glVertexAttrib4d(GLSLMgr::CommonID3, sd.x, sd.y,sd.z, sd.w); // Constants3
						glVertexAttrib4d(GLSLMgr::CommonID2, T0.x, T0.y, T0.z,phase); // Constants2
						glVertexAttrib4d(GLSLMgr::CommonID1, dx, dy, f1, f2); // Constants1	
	
						glBegin(GL_LINES);
						glVertex4d(t1.x, t1.y, t1.z, 0);
						glVertex4d(t2.x, t2.y, t2.z, 0);
						glEnd();
					}
					t0 = t1;
					s += ds;
				}
				v = t2 - t1;
				v = v.normalize();
				v = v * cl;

				bot = t2;
				w1 = dx;
				w2 = dy;

			} else if (isEnabled()) { // no spline
				Point4D P0(p0);
				Point4D P1(p1);
				Point4D P2(p2);
				P0.w=phase;
				P1.w=bot_offset;
				P2.w=top_offset;

				if(isCollectBranchesSet()){
					TNBranch::collectBranches(P0, P1, P2,
					Point4D(w1, w2, 0, 1),
					Point4D(nscale,color_flags, tid, psmode), sd,c);
				}
				else {	
					glVertexAttrib4d(GLSLMgr::CommonID3, sd.x, sd.y,sd.z, sd.w); // Constants3
					glVertexAttrib4d(GLSLMgr::CommonID2, p0.x, p0.y, p0.z, phase); // Constants2
					glVertexAttrib4d(GLSLMgr::CommonID1, w1, w2, 0, 1); // Constants1
	
					glBegin(GL_LINES);
					glVertex4d(p1.x, p1.y, p1.z, bot_offset);
					glVertex4d(p2.x, p2.y, p2.z, top_offset);
					glEnd();
				}
			}
		}
//#define NO_LINE_SHADOW
#ifdef NO_LINE_SHADOW		   
        else if(!PlantMgr::shadow_mode && isEnabled()){ // line mode
#else
		else if (isEnabled()) { // line mode > MIN_DRAW_WIDTH
#endif
			double nscale = TNplant::norm_min;
			root->rendered++;
			root->addLine(branch_id);
			setColor(nocache);
			c = S0.c;

			poly_mode = POLY_LINE;
			shader_mode = LINE_MODE;
			int psmode=poly_mode|shader_mode;

			if(isCollectBranchesSet()){
				TNBranch::collectBranches(Point4D(p0), Point4D(p1), Point4D(p2),
				Point4D(0, 0, 0, 0),
				Point4D(nscale,color_flags, tid, psmode), sd,c);
			}
			else{			
				glVertexAttrib4d(GLSLMgr::TexCoordsID, nscale, color_flags, tid,shaderMode(psmode));
				glPolygonMode(GL_FRONT_AND_BACK, polyMode(psmode));
				glBegin(GL_LINES);
				glVertex4d(p1.x, p1.y, p1.z, 0);
				glVertex4d(p2.x, p2.y, p2.z, 0);
				glEnd();
			}
		}
	}
	if (child)
		child->fork(FIRST_FORK, bot, v, tip, child_size, child_width, lev);
	if (opt & LAST_EMIT)
		return;
	if (isPlantBranch() ) {
		double n = max_splits*lerp(density,0.0,1.0,2*SRAND+0.25,1.0);
		n = n >= 1 ? n : 1;
	
		child_width *= evalArg(7,width_taper);
		child_size *= evalArg(8,length_taper);
		if (n>=1 && child_width > MIN_LINE_WIDTH){
			emit(FIRST_EMIT, bot, v, tip, child_size, child_width, lev);
			for (int i = 1; i < n; i++) {
				emit(0, bot, v, tip, child_size, child_width, lev);
			}
		}
	}
}

TNplant* TNBranch::getRoot() {
	NodeIF *p = getParent();
	while (p && p->typeValue() != ID_PLANT) {
		p=p->getParent();
	}
	if(p && p->typeValue() == ID_PLANT)
		return p;
	return 0;
}
void TNBranch::valueString(char *s){
	if(strlen(name_str)>0)
		sprintf(s+strlen(s),"%s(\"%s\",",symbol(),name_str);
	else
		sprintf(s+strlen(s),"%s(",symbol());
	TNbase::valueString(s);
}
void TNBranch::save(FILE *f){
	fprintf(f,"\n%s",tabs);
	if(strlen(name_str)>0)
		fprintf(f,"%s(\"%s\"",symbol(),name_str);
	else
		fprintf(f,"%s(",symbol());
	if(left){
		if(strlen(name_str)>0)
			fprintf(f,",");
		left->save(f);
	}
	fprintf(f,")");
	if((strlen(image_file)) ||(strlen(colorexpr))){
		fprintf(f,"[");
		if(strlen(image_file)){
			fprintf(f,"\"%s\"",image_file);
			if(strlen(colorexpr))
				fprintf(f,",");				
		}
		if(strlen(colorexpr))
			fprintf(f,"%s",colorexpr);
		fprintf(f,"]");
	}
	if(right)
		right->save(f);
}
void TNBranch::saveNode(FILE *f){
	fprintf(f,"%s(",symbol());
	if(strlen(name_str))
		fprintf(f,"\"%s\",",name_str);
	if(left)
		left->save(f);
	fprintf(f,")");
	if(strlen(image_file) ||(strlen(colorexpr))){
		fprintf(f,"[");
		if(strlen(image_file)){
			fprintf(f,"\"%s\"",image_file);
			if(strlen(colorexpr))
				fprintf(f,",");				
		}
		if(strlen(colorexpr))
			fprintf(f,"%s",colorexpr);
		fprintf(f,"]");
	}

}
NodeIF *TNBranch::removeNode(){
	return TNfunc::removeNode();
}
//-------------------------------------------------------------
// TNBranch::replaceNode
//-------------------------------------------------------------
NodeIF *TNBranch::replaceNode(NodeIF *c){
	if(!c || c->typeValue()!=typeValue())
		return 0;
	if(left)
		delete left;
	if(base)
		delete base;
	TNBranch *newbranch=(TNBranch *)c;
	left=newbranch->left;
	left->setParent(this);
	base=newbranch->base;
	setName(newbranch->nodeName());
	if(base)
		base->setParent(this);
	init();
	return this;
}

void TNBranch::eval(){
	if(right)
		right->eval();
}

int TNBranch::getChildren(LinkedList<NodeIF*>&l){
	return TNfunc::getChildren(l);
}

void TNBranch::collectBranches(Point4D p0,Point4D p1,Point4D p2, Point4D f, Point4D d,Point4D s,Color c){
		branches.add(new BranchData(p0,p1,p2,f,d,s,c));
}
void TNBranch::renderBranches(){
	//glDisable(GL_CULL_FACE);
	for(int i=branches.size-1;i>=0;i--){ // Farthest to closest
		BranchData *s=branches[i];
		s->render();
	}
	//glEnable(GL_CULL_FACE);
}
//===================== TNleaf ==============================
//************************************************************
// TNLeaf class
//************************************************************
ValueList<BranchData*> TNLeaf::leafs(100,1000);

double BranchData::distance() { 
	return data[2].length();
}

void  BranchData::render(){
	Point4D sd=data[5];
	Point4D p0=data[0];
	int polymode=TNBranch::polyMode(data[4].w);
		
	glVertexAttrib4d(GLSLMgr::CommonID3, sd.x, sd.y,sd.z, sd.w); // Constants3
	glVertexAttrib4d(GLSLMgr::CommonID2, p0.x, p0.y, p0.z, p0.w);   // Constants2
	glVertexAttrib4d(GLSLMgr::CommonID1, data[3].x,data[3].y,data[3].z,data[3].w); // taper, compression, width_ratio,size		
	glVertexAttrib4d(GLSLMgr::TexCoordsID, data[4].x, data[4].y, data[4].z, TNBranch::shaderMode(data[4].w)); //nscale,color_flags,tid,shader_mode
	if(!PlantMgr::shadow_mode) // if this is set shadows aren't drawn (???)
		glColor4d(c.red(), c.green(), c.blue(), c.alpha());

	if (PlantMgr::poly_lines || PlantMgr::shader_lines)
		glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);	
	else 
	if(polymode!=oldmode)
		glPolygonMode(GL_FRONT_AND_BACK, polymode);	
	glBegin(GL_LINES);
	glVertex4d(data[1].x, data[1].y, data[1].z, 0);
	glVertex4d(data[2].x, data[2].y, data[2].z, 0);
	glEnd();
	oldmode=polymode;
}

bool TNLeaf::sorted=false;
int TNLeaf::left_side=0;
TNLeaf::TNLeaf(TNode *l, TNode *r, TNode *b) : TNBranch(l,r,b){
	setImageMgr(&leaf_mgr);
	width_taper=0.8;
	length_taper=1;
	min_level=-1;
	offset=1;
	flatness=0.2;
	phase=0;
}

void TNLeaf::collectLeafs(Point4D p0,Point4D p1,Point4D p2, Point4D f, Point4D d,Point4D s,Color c){
	leafs.add(new BranchData(p0,p1,p2,f,d,s,c));
}

void TNLeaf::renderLeafs(){
	//glDisable(GL_CULL_FACE);
	for(int i=leafs.size-1;i>=0;i--){ // Farthest to closest
		BranchData *s=leafs[i];
		if(PlantMgr::shadow_mode && !TNBranch::isShadowEnabled(s->data[3].w)){
			continue;
		}
		s->render();
	}
	//glEnable(GL_CULL_FACE);
}


Point TNLeaf::setVector(Point vec, Point start, int lvl){
	return TNBranch::setVector(vec,start,lvl);

}
